{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open System

let lexeme lexbuf =
   LexBuffer<char>.LexemeString lexbuf
let newline (lexbuf : LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

let range (lexbuf : LexBuffer<_>) = lexbuf.EndPos.Line + 1, lexbuf.EndPos.Column

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let digit = ['0'-'9']
let letter = ['a'-'z' 'A'-'Z']
let simpleId = ['a'-'z' 'A'-'Z' '_' '0'-'9']
let customSymbols = [':' '?' '@' '%' '$']
let idBody = simpleId | customSymbols 


rule tokenstream = parse
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
| "open" { Parser.OPEN (range lexbuf) }
| "include" { Parser.INCLUDE (range lexbuf) }
| '\'' { Parser.APOSTROPHE }
| ',' { Parser.COMMA }
| '.' { Parser.DOT }
| '(' { Parser.LBRACKET }
| ')' { Parser.RBRACKET }
| '#' { Parser.HASH }
| ':' { Parser.COLON }
| "->" { Parser.ARROW (range lexbuf) }
| "=>" { Parser.DARROW (range lexbuf) }
| "=" { Parser.EQUAL (range lexbuf) }
| "Func" { Parser.FUNC (range lexbuf) } 
| "TypeFunc" { Parser.TYPEFUNC (range lexbuf) }
| "Data" { Parser.DATA (range lexbuf) }
| "module" { Parser.MODULE (range lexbuf) }
| eof   	{ Parser.EOF }
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }

// --------------------------
| ['-']?digit+   { Parser.INT (Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?   { Parser.FLOAT (Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| idBody+   { printfn "Id found"; Parser.ID (LexBuffer<_>.LexemeString lexbuf) }
| "\"" [^'"']* "\"" { printfn "string found"; let s = LexBuffer<_>.LexemeString lexbuf in Parser.STRING (s.Trim [|'\"'|]) }

