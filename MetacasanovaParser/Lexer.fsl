{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open System
open ParserUtils

let lexeme lexbuf =
   LexBuffer<char>.LexemeString lexbuf
let newline (lexbuf : LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

let range (lexbuf : LexBuffer<_>) = lexbuf.EndPos.Line + 1, lexbuf.EndPos.Column

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let digit = ['0'-'9']
let letter = ['a'-'z' 'A'-'Z']
let id = ['a'-'z' 'A'-'Z' '_' '0'-'9']
let customSymbols = ['?' '@' '%' '$' '#' '!' '+' '*' '/']
let customOperator = customSymbols+ id?

rule linecomment = parse
| newline       { newline lexbuf; tokenstream lexbuf }
| _             { linecomment lexbuf }

and comment = parse
| "*/"    { tokenstream lexbuf }
| newline            { newline lexbuf; comment lexbuf }
| _  { comment lexbuf }

and emit = parse
| ">>" { "" }
| _ { LexBuffer<_>.LexemeString lexbuf + (emit lexbuf) }

and bar = parse
| '-' { 1 + (bar lexbuf) }
| _ { 0 }

and tokenstream = parse
| "//"        { linecomment lexbuf }
| "/*"        { comment lexbuf }
| whitespace	{ tokenstream lexbuf }
| newline	{ newline lexbuf; Parser.NEWLINE }
| "Module" { Parser.MODULE (range lexbuf) }
| "open" { Parser.OPEN (range lexbuf) }
| "include" { Parser.INCLUDE (range lexbuf) }
| "is" { Parser.IS (range lexbuf) }
| "fun" { Parser.FUN (range lexbuf) }
| "main" { Parser.MAIN (range lexbuf) }
| "arithmetic" { Parser.ARITHMETIC (range lexbuf) }
| ',' { Parser.COMMA ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| '.' { Parser.DOT ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| '(' { Parser.LBRACKET }
| ')' { Parser.RBRACKET }
| '{' { Parser.LBRACE }
| '}' { Parser.RBRACE }
| '[' { Parser.LSQUARE }
| ']' { Parser.RSQUARE }
| '#' { Parser.HASH ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| ':' { Parser.COLON }
| ":=" { Parser.BIND }
| "--" { 
        let barCount = bar lexbuf
        Parser.BAR(barCount)}
| '-' { Parser.ID ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| "->" { Parser.ARROW (range lexbuf) }
| "=>" { Parser.DARROW (range lexbuf) }
| "=" { Parser.EQUAL (range lexbuf) }
| ">" { Parser.GT (range lexbuf) }
| ">=" { Parser.GEQ (range lexbuf) }
| "<" { Parser.LT (range lexbuf) }
| "<=" { Parser.LEQ (range lexbuf) }
| "<>" { Parser.NEQ (range lexbuf) }
| "()" { Parser.UNIT (range lexbuf) }
| '*' { Parser.STAR (range lexbuf) }
| "Priority" { Parser.PRIORITY (range lexbuf) }
| "||>" { Parser.RASSOC ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| "<||" { Parser.LASSOC ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| "Func" { Parser.FUNC (range lexbuf) } 
| "Functor" { Parser.FUNCTOR (range lexbuf) }
| "Data" { Parser.DATA (range lexbuf) }
| "<<" { Parser.EMIT ((emit lexbuf),(range lexbuf)) }
| "namespace" { Parser.NAMESPACE (range lexbuf) }
| eof   	{ Parser.EOF }
| ['-']?digit+   { Parser.INT (Int32.Parse(LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?   { Parser.FLOAT (Double.Parse(LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| "\"" [^'"']* "\"" { let s = LexBuffer<_>.LexemeString lexbuf in Parser.STRING ((s.Trim [|'\"'|]),(range lexbuf)) }
| letter id*   { Parser.ID ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| customOperator+ { Parser.CUSTOMOPERATOR ((LexBuffer<_>.LexemeString lexbuf),(range lexbuf)) }
| _ {
  let pos = range lexbuf 
  raise(ParseError(sprintf "Parse Error: unidentified token %A" (LexBuffer<_>.LexemeString lexbuf), fst pos, snd pos)) }

