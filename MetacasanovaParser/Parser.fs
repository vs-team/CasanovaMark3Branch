// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Common
open ParserAST
open System
open ParserUtils


# 15 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | FUNC of (int * int)
  | TYPEFUNC of (int * int)
  | OPEN of (int * int)
  | INCLUDE of (int * int)
  | DATA of (int * int)
  | NAMESPACE of (int * int)
  | IS of (int * int)
  | FUN of (int * int)
  | GT of (int * int)
  | GEQ of (int * int)
  | LT of (int * int)
  | LEQ of (int * int)
  | NEQ of (int * int)
  | MAIN of (int * int)
  | ARITHMETIC of (int * int)
  | MODULE of (int * int)
  | PRIORITY of (int * int)
  | LEMIT of (int * int)
  | REMIT of (int * int)
  | LBRACKET
  | RBRACKET
  | COLON
  | NEWLINE
  | BIND
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | COMMA of (System.String * (int * int))
  | DOT of (System.String * (int * int))
  | HASH of (System.String * (int * int))
  | LASSOC of (System.String * (int * int))
  | RASSOC of (System.String * (int * int))
  | BAR of (int)
  | ARROW of (System.Int32 * System.Int32)
  | DARROW of (System.Int32 * System.Int32)
  | EQUAL of (System.Int32 * System.Int32)
  | EMIT of (string * (int * int))
  | UNIT of ((int * int))
  | CUSTOMOPERATOR of (System.String * (int * int))
  | ID of (System.String * (int * int))
  | STRING of (string * (int * int))
  | FLOAT of (float * (int * int))
  | INT of (int * (int * int))
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FUNC
    | TOKEN_TYPEFUNC
    | TOKEN_OPEN
    | TOKEN_INCLUDE
    | TOKEN_DATA
    | TOKEN_NAMESPACE
    | TOKEN_IS
    | TOKEN_FUN
    | TOKEN_GT
    | TOKEN_GEQ
    | TOKEN_LT
    | TOKEN_LEQ
    | TOKEN_NEQ
    | TOKEN_MAIN
    | TOKEN_ARITHMETIC
    | TOKEN_MODULE
    | TOKEN_PRIORITY
    | TOKEN_LEMIT
    | TOKEN_REMIT
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_COLON
    | TOKEN_NEWLINE
    | TOKEN_BIND
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LSQUARE
    | TOKEN_RSQUARE
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_HASH
    | TOKEN_LASSOC
    | TOKEN_RASSOC
    | TOKEN_BAR
    | TOKEN_ARROW
    | TOKEN_DARROW
    | TOKEN_EQUAL
    | TOKEN_EMIT
    | TOKEN_UNIT
    | TOKEN_CUSTOMOPERATOR
    | TOKEN_ID
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_newLineSeq
    | NONTERM_optionalNewLines
    | NONTERM_program
    | NONTERM_dottedPath
    | NONTERM_commaPath
    | NONTERM_genericSeq
    | NONTERM_includeOrOpenStmts
    | NONTERM_includeOrOpenStmt
    | NONTERM_declarations
    | NONTERM_priority
    | NONTERM_associativity
    | NONTERM_declaration
    | NONTERM_typeOrNameDeclarations
    | NONTERM_typeOrNameDeclaration
    | NONTERM_typeVarsSeq
    | NONTERM_genericTypeDef
    | NONTERM_typeDeclaration
    | NONTERM_lambdaTypeDeclaration
    | NONTERM_customOperator
    | NONTERM_arg
    | NONTERM_argSeq
    | NONTERM_literal
    | NONTERM_emit
    | NONTERM_functionCall
    | NONTERM_arithmeticCall
    | NONTERM_arithmeticExpr
    | NONTERM_comparisonOp
    | NONTERM_premises
    | NONTERM_conclusion
    | NONTERM_subtype
    | NONTERM_subtypes
    | NONTERM_mainOpt
    | NONTERM_rule
    | NONTERM_rules

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | FUNC _ -> 1 
  | TYPEFUNC _ -> 2 
  | OPEN _ -> 3 
  | INCLUDE _ -> 4 
  | DATA _ -> 5 
  | NAMESPACE _ -> 6 
  | IS _ -> 7 
  | FUN _ -> 8 
  | GT _ -> 9 
  | GEQ _ -> 10 
  | LT _ -> 11 
  | LEQ _ -> 12 
  | NEQ _ -> 13 
  | MAIN _ -> 14 
  | ARITHMETIC _ -> 15 
  | MODULE _ -> 16 
  | PRIORITY _ -> 17 
  | LEMIT _ -> 18 
  | REMIT _ -> 19 
  | LBRACKET  -> 20 
  | RBRACKET  -> 21 
  | COLON  -> 22 
  | NEWLINE  -> 23 
  | BIND  -> 24 
  | LBRACE  -> 25 
  | RBRACE  -> 26 
  | LSQUARE  -> 27 
  | RSQUARE  -> 28 
  | COMMA _ -> 29 
  | DOT _ -> 30 
  | HASH _ -> 31 
  | LASSOC _ -> 32 
  | RASSOC _ -> 33 
  | BAR _ -> 34 
  | ARROW _ -> 35 
  | DARROW _ -> 36 
  | EQUAL _ -> 37 
  | EMIT _ -> 38 
  | UNIT _ -> 39 
  | CUSTOMOPERATOR _ -> 40 
  | ID _ -> 41 
  | STRING _ -> 42 
  | FLOAT _ -> 43 
  | INT _ -> 44 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_FUNC 
  | 2 -> TOKEN_TYPEFUNC 
  | 3 -> TOKEN_OPEN 
  | 4 -> TOKEN_INCLUDE 
  | 5 -> TOKEN_DATA 
  | 6 -> TOKEN_NAMESPACE 
  | 7 -> TOKEN_IS 
  | 8 -> TOKEN_FUN 
  | 9 -> TOKEN_GT 
  | 10 -> TOKEN_GEQ 
  | 11 -> TOKEN_LT 
  | 12 -> TOKEN_LEQ 
  | 13 -> TOKEN_NEQ 
  | 14 -> TOKEN_MAIN 
  | 15 -> TOKEN_ARITHMETIC 
  | 16 -> TOKEN_MODULE 
  | 17 -> TOKEN_PRIORITY 
  | 18 -> TOKEN_LEMIT 
  | 19 -> TOKEN_REMIT 
  | 20 -> TOKEN_LBRACKET 
  | 21 -> TOKEN_RBRACKET 
  | 22 -> TOKEN_COLON 
  | 23 -> TOKEN_NEWLINE 
  | 24 -> TOKEN_BIND 
  | 25 -> TOKEN_LBRACE 
  | 26 -> TOKEN_RBRACE 
  | 27 -> TOKEN_LSQUARE 
  | 28 -> TOKEN_RSQUARE 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_DOT 
  | 31 -> TOKEN_HASH 
  | 32 -> TOKEN_LASSOC 
  | 33 -> TOKEN_RASSOC 
  | 34 -> TOKEN_BAR 
  | 35 -> TOKEN_ARROW 
  | 36 -> TOKEN_DARROW 
  | 37 -> TOKEN_EQUAL 
  | 38 -> TOKEN_EMIT 
  | 39 -> TOKEN_UNIT 
  | 40 -> TOKEN_CUSTOMOPERATOR 
  | 41 -> TOKEN_ID 
  | 42 -> TOKEN_STRING 
  | 43 -> TOKEN_FLOAT 
  | 44 -> TOKEN_INT 
  | 47 -> TOKEN_end_of_input
  | 45 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_newLineSeq 
    | 3 -> NONTERM_newLineSeq 
    | 4 -> NONTERM_newLineSeq 
    | 5 -> NONTERM_optionalNewLines 
    | 6 -> NONTERM_optionalNewLines 
    | 7 -> NONTERM_program 
    | 8 -> NONTERM_program 
    | 9 -> NONTERM_dottedPath 
    | 10 -> NONTERM_dottedPath 
    | 11 -> NONTERM_dottedPath 
    | 12 -> NONTERM_commaPath 
    | 13 -> NONTERM_commaPath 
    | 14 -> NONTERM_genericSeq 
    | 15 -> NONTERM_genericSeq 
    | 16 -> NONTERM_genericSeq 
    | 17 -> NONTERM_includeOrOpenStmts 
    | 18 -> NONTERM_includeOrOpenStmts 
    | 19 -> NONTERM_includeOrOpenStmt 
    | 20 -> NONTERM_includeOrOpenStmt 
    | 21 -> NONTERM_includeOrOpenStmt 
    | 22 -> NONTERM_declarations 
    | 23 -> NONTERM_declarations 
    | 24 -> NONTERM_priority 
    | 25 -> NONTERM_priority 
    | 26 -> NONTERM_associativity 
    | 27 -> NONTERM_associativity 
    | 28 -> NONTERM_associativity 
    | 29 -> NONTERM_declaration 
    | 30 -> NONTERM_declaration 
    | 31 -> NONTERM_declaration 
    | 32 -> NONTERM_declaration 
    | 33 -> NONTERM_typeOrNameDeclarations 
    | 34 -> NONTERM_typeOrNameDeclarations 
    | 35 -> NONTERM_typeOrNameDeclarations 
    | 36 -> NONTERM_typeOrNameDeclaration 
    | 37 -> NONTERM_typeOrNameDeclaration 
    | 38 -> NONTERM_typeVarsSeq 
    | 39 -> NONTERM_typeVarsSeq 
    | 40 -> NONTERM_genericTypeDef 
    | 41 -> NONTERM_genericTypeDef 
    | 42 -> NONTERM_typeDeclaration 
    | 43 -> NONTERM_typeDeclaration 
    | 44 -> NONTERM_typeDeclaration 
    | 45 -> NONTERM_typeDeclaration 
    | 46 -> NONTERM_lambdaTypeDeclaration 
    | 47 -> NONTERM_lambdaTypeDeclaration 
    | 48 -> NONTERM_customOperator 
    | 49 -> NONTERM_customOperator 
    | 50 -> NONTERM_customOperator 
    | 51 -> NONTERM_customOperator 
    | 52 -> NONTERM_customOperator 
    | 53 -> NONTERM_customOperator 
    | 54 -> NONTERM_arg 
    | 55 -> NONTERM_arg 
    | 56 -> NONTERM_arg 
    | 57 -> NONTERM_arg 
    | 58 -> NONTERM_arg 
    | 59 -> NONTERM_argSeq 
    | 60 -> NONTERM_argSeq 
    | 61 -> NONTERM_literal 
    | 62 -> NONTERM_literal 
    | 63 -> NONTERM_literal 
    | 64 -> NONTERM_literal 
    | 65 -> NONTERM_emit 
    | 66 -> NONTERM_functionCall 
    | 67 -> NONTERM_arithmeticCall 
    | 68 -> NONTERM_arithmeticExpr 
    | 69 -> NONTERM_arithmeticExpr 
    | 70 -> NONTERM_arithmeticExpr 
    | 71 -> NONTERM_arithmeticExpr 
    | 72 -> NONTERM_comparisonOp 
    | 73 -> NONTERM_comparisonOp 
    | 74 -> NONTERM_comparisonOp 
    | 75 -> NONTERM_comparisonOp 
    | 76 -> NONTERM_comparisonOp 
    | 77 -> NONTERM_comparisonOp 
    | 78 -> NONTERM_premises 
    | 79 -> NONTERM_premises 
    | 80 -> NONTERM_premises 
    | 81 -> NONTERM_premises 
    | 82 -> NONTERM_premises 
    | 83 -> NONTERM_premises 
    | 84 -> NONTERM_premises 
    | 85 -> NONTERM_conclusion 
    | 86 -> NONTERM_conclusion 
    | 87 -> NONTERM_subtype 
    | 88 -> NONTERM_subtype 
    | 89 -> NONTERM_subtypes 
    | 90 -> NONTERM_subtypes 
    | 91 -> NONTERM_mainOpt 
    | 92 -> NONTERM_mainOpt 
    | 93 -> NONTERM_rule 
    | 94 -> NONTERM_rules 
    | 95 -> NONTERM_rules 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 47 
let _fsyacc_tagOfErrorTerminal = 45

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | FUNC _ -> "FUNC" 
  | TYPEFUNC _ -> "TYPEFUNC" 
  | OPEN _ -> "OPEN" 
  | INCLUDE _ -> "INCLUDE" 
  | DATA _ -> "DATA" 
  | NAMESPACE _ -> "NAMESPACE" 
  | IS _ -> "IS" 
  | FUN _ -> "FUN" 
  | GT _ -> "GT" 
  | GEQ _ -> "GEQ" 
  | LT _ -> "LT" 
  | LEQ _ -> "LEQ" 
  | NEQ _ -> "NEQ" 
  | MAIN _ -> "MAIN" 
  | ARITHMETIC _ -> "ARITHMETIC" 
  | MODULE _ -> "MODULE" 
  | PRIORITY _ -> "PRIORITY" 
  | LEMIT _ -> "LEMIT" 
  | REMIT _ -> "REMIT" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | COLON  -> "COLON" 
  | NEWLINE  -> "NEWLINE" 
  | BIND  -> "BIND" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LSQUARE  -> "LSQUARE" 
  | RSQUARE  -> "RSQUARE" 
  | COMMA _ -> "COMMA" 
  | DOT _ -> "DOT" 
  | HASH _ -> "HASH" 
  | LASSOC _ -> "LASSOC" 
  | RASSOC _ -> "RASSOC" 
  | BAR _ -> "BAR" 
  | ARROW _ -> "ARROW" 
  | DARROW _ -> "DARROW" 
  | EQUAL _ -> "EQUAL" 
  | EMIT _ -> "EMIT" 
  | UNIT _ -> "UNIT" 
  | CUSTOMOPERATOR _ -> "CUSTOMOPERATOR" 
  | ID _ -> "ID" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | FUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPEFUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INCLUDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DATA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAMESPACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARITHMETIC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MODULE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PRIORITY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEMIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REMIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | BIND  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LSQUARE  -> (null : System.Object) 
  | RSQUARE  -> (null : System.Object) 
  | COMMA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DOT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | HASH _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LASSOC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | RASSOC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | BAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EMIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CUSTOMOPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 16us; 65535us; 0us; 7us; 4us; 5us; 10us; 11us; 34us; 35us; 37us; 38us; 52us; 53us; 60us; 61us; 110us; 111us; 114us; 115us; 119us; 120us; 141us; 142us; 145us; 146us; 150us; 151us; 154us; 155us; 160us; 161us; 164us; 165us; 1us; 65535us; 0us; 8us; 1us; 65535us; 0us; 2us; 4us; 65535us; 9us; 10us; 21us; 22us; 33us; 34us; 36us; 37us; 2us; 65535us; 25us; 26us; 27us; 28us; 2us; 65535us; 46us; 47us; 54us; 55us; 3us; 65535us; 7us; 16us; 11us; 12us; 31us; 32us; 3us; 65535us; 7us; 31us; 11us; 31us; 31us; 31us; 3us; 65535us; 13us; 14us; 17us; 18us; 40us; 41us; 2us; 65535us; 50us; 51us; 58us; 59us; 2us; 65535us; 51us; 52us; 59us; 60us; 3us; 65535us; 13us; 40us; 17us; 40us; 40us; 40us; 3us; 65535us; 47us; 48us; 55us; 56us; 65us; 66us; 3us; 65535us; 47us; 64us; 55us; 64us; 65us; 64us; 2us; 65535us; 70us; 71us; 72us; 73us; 1us; 65535us; 79us; 80us; 9us; 65535us; 47us; 68us; 49us; 50us; 55us; 68us; 57us; 58us; 65us; 68us; 70us; 69us; 72us; 69us; 75us; 82us; 83us; 82us; 2us; 65535us; 75us; 76us; 83us; 84us; 14us; 65535us; 91us; 95us; 101us; 95us; 102us; 95us; 113us; 95us; 134us; 95us; 136us; 95us; 138us; 95us; 140us; 95us; 142us; 95us; 144us; 95us; 146us; 95us; 149us; 95us; 162us; 95us; 165us; 95us; 14us; 65535us; 91us; 101us; 101us; 101us; 102us; 101us; 113us; 101us; 134us; 102us; 136us; 102us; 138us; 102us; 140us; 141us; 142us; 102us; 144us; 145us; 146us; 102us; 149us; 101us; 162us; 102us; 165us; 101us; 12us; 65535us; 91us; 92us; 101us; 103us; 102us; 103us; 113us; 114us; 134us; 112us; 136us; 112us; 138us; 112us; 142us; 112us; 146us; 112us; 149us; 150us; 162us; 112us; 165us; 148us; 17us; 65535us; 91us; 94us; 101us; 94us; 102us; 94us; 113us; 94us; 116us; 121us; 125us; 121us; 126us; 121us; 134us; 94us; 136us; 94us; 138us; 94us; 140us; 94us; 142us; 94us; 144us; 94us; 146us; 94us; 149us; 94us; 162us; 94us; 165us; 94us; 6us; 65535us; 134us; 134us; 136us; 134us; 138us; 134us; 142us; 134us; 146us; 134us; 162us; 134us; 6us; 65535us; 134us; 136us; 136us; 136us; 138us; 136us; 142us; 136us; 146us; 136us; 162us; 136us; 6us; 65535us; 134us; 138us; 136us; 138us; 138us; 138us; 142us; 138us; 146us; 138us; 162us; 138us; 3us; 65535us; 116us; 117us; 125us; 123us; 126us; 124us; 1us; 65535us; 102us; 144us; 6us; 65535us; 134us; 135us; 136us; 137us; 138us; 139us; 142us; 143us; 146us; 147us; 162us; 163us; 1us; 65535us; 165us; 166us; 3us; 65535us; 12us; 157us; 16us; 157us; 157us; 157us; 3us; 65535us; 12us; 13us; 16us; 17us; 157us; 158us; 3us; 65535us; 14us; 162us; 18us; 162us; 167us; 162us; 3us; 65535us; 14us; 167us; 18us; 167us; 167us; 167us; 3us; 65535us; 14us; 15us; 18us; 19us; 167us; 168us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 20us; 22us; 24us; 29us; 32us; 35us; 39us; 43us; 47us; 50us; 53us; 57us; 61us; 65us; 68us; 70us; 80us; 83us; 98us; 113us; 126us; 144us; 151us; 158us; 165us; 169us; 171us; 178us; 180us; 184us; 188us; 192us; 196us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 4us; 2us; 5us; 8us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 8us; 1us; 8us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 11us; 2us; 12us; 13us; 1us; 12us; 1us; 12us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 24us; 1us; 24us; 1us; 26us; 1us; 27us; 2us; 29us; 31us; 2us; 29us; 31us; 2us; 29us; 31us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 29us; 2us; 30us; 32us; 2us; 30us; 32us; 2us; 30us; 32us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 2us; 33us; 34us; 1us; 33us; 1us; 33us; 1us; 36us; 1us; 37us; 2us; 38us; 39us; 1us; 38us; 1us; 38us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 45us; 2us; 46us; 47us; 1us; 46us; 1us; 46us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 2us; 57us; 81us; 1us; 58us; 2us; 58us; 84us; 2us; 58us; 86us; 2us; 59us; 60us; 3us; 59us; 60us; 82us; 1us; 59us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 67us; 2us; 67us; 70us; 1us; 67us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 69us; 2us; 70us; 70us; 2us; 70us; 71us; 1us; 70us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 77us; 1us; 78us; 1us; 78us; 1us; 79us; 1us; 79us; 1us; 80us; 1us; 80us; 1us; 81us; 1us; 81us; 1us; 81us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 82us; 1us; 82us; 1us; 85us; 1us; 85us; 1us; 85us; 1us; 85us; 1us; 87us; 1us; 87us; 1us; 87us; 1us; 87us; 1us; 88us; 1us; 89us; 1us; 89us; 1us; 91us; 1us; 91us; 1us; 91us; 1us; 93us; 1us; 93us; 1us; 93us; 1us; 93us; 1us; 93us; 1us; 94us; 1us; 94us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 45us; 47us; 49us; 51us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 99us; 102us; 105us; 107us; 109us; 111us; 113us; 115us; 118us; 121us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 141us; 143us; 145us; 147us; 149us; 152us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 179us; 181us; 183us; 185us; 187us; 189us; 191us; 193us; 195us; 197us; 199us; 201us; 203us; 205us; 207us; 210us; 212us; 215us; 218us; 221us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 256us; 258us; 260us; 262us; 264us; 266us; 269us; 272us; 274us; 276us; 278us; 280us; 282us; 284us; 286us; 288us; 290us; 292us; 294us; 296us; 298us; 300us; 302us; 304us; 306us; 308us; 310us; 312us; 314us; 316us; 318us; 320us; 322us; 324us; 326us; 328us; 330us; 332us; 334us; 336us; 338us; 340us; 342us; 344us; 346us; 348us; 350us; 352us; 354us; 356us; 358us; |]
let _fsyacc_action_rows = 169
let _fsyacc_actionTableElements = [|2us; 16390us; 0us; 6us; 23us; 4us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 2us; 16387us; 0us; 6us; 23us; 4us; 0us; 16386us; 0us; 16388us; 22us; 16389us; 0us; 16402us; 1us; 16402us; 3us; 36us; 4us; 33us; 5us; 16402us; 14us; 16402us; 15us; 16402us; 20us; 16402us; 29us; 16402us; 30us; 16402us; 31us; 16402us; 32us; 16402us; 33us; 16402us; 34us; 16402us; 38us; 16402us; 39us; 16402us; 40us; 16402us; 41us; 16402us; 42us; 16402us; 43us; 16402us; 44us; 16402us; 45us; 39us; 1us; 32768us; 6us; 9us; 2us; 32768us; 41us; 20us; 45us; 23us; 2us; 32768us; 0us; 6us; 23us; 4us; 3us; 16402us; 3us; 36us; 4us; 33us; 45us; 39us; 2us; 16474us; 41us; 152us; 45us; 156us; 2us; 16407us; 1us; 46us; 5us; 54us; 2us; 16476us; 0us; 16479us; 14us; 159us; 0us; 16391us; 2us; 16474us; 41us; 152us; 45us; 156us; 2us; 16407us; 1us; 46us; 5us; 54us; 2us; 16476us; 0us; 16479us; 14us; 159us; 0us; 16392us; 1us; 16394us; 30us; 21us; 2us; 32768us; 41us; 20us; 45us; 23us; 0us; 16393us; 0us; 16395us; 1us; 16397us; 29us; 25us; 1us; 32768us; 41us; 24us; 0us; 16396us; 1us; 32768us; 41us; 24us; 1us; 32768us; 28us; 29us; 0us; 16398us; 0us; 16400us; 3us; 16402us; 3us; 36us; 4us; 33us; 45us; 39us; 0us; 16401us; 2us; 32768us; 41us; 20us; 45us; 23us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16403us; 2us; 32768us; 41us; 20us; 45us; 23us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16404us; 0us; 16405us; 2us; 16407us; 1us; 46us; 5us; 54us; 0us; 16406us; 1us; 32768us; 44us; 43us; 0us; 16408us; 0us; 16410us; 0us; 16411us; 2us; 16399us; 27us; 27us; 45us; 30us; 5us; 16419us; 20us; 75us; 38us; 78us; 41us; 79us; 42us; 67us; 45us; 81us; 2us; 32768us; 22us; 49us; 45us; 62us; 4us; 32768us; 20us; 75us; 38us; 78us; 41us; 79us; 45us; 81us; 1us; 16409us; 17us; 42us; 2us; 16412us; 32us; 44us; 33us; 45us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16413us; 2us; 16399us; 27us; 27us; 45us; 30us; 5us; 16419us; 20us; 75us; 38us; 78us; 41us; 79us; 42us; 67us; 45us; 81us; 2us; 32768us; 22us; 57us; 45us; 63us; 4us; 32768us; 20us; 75us; 38us; 78us; 41us; 79us; 45us; 81us; 1us; 16409us; 17us; 42us; 2us; 16412us; 32us; 44us; 33us; 45us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16414us; 0us; 16415us; 0us; 16416us; 1us; 16418us; 35us; 65us; 5us; 16419us; 20us; 75us; 38us; 78us; 41us; 79us; 42us; 67us; 45us; 81us; 0us; 16417us; 0us; 16420us; 0us; 16421us; 1us; 16423us; 29us; 70us; 4us; 32768us; 20us; 75us; 38us; 78us; 41us; 79us; 45us; 81us; 0us; 16422us; 4us; 32768us; 20us; 75us; 38us; 78us; 41us; 79us; 45us; 81us; 1us; 32768us; 28us; 74us; 0us; 16424us; 4us; 32768us; 20us; 75us; 38us; 78us; 41us; 79us; 45us; 81us; 1us; 32768us; 21us; 77us; 0us; 16426us; 0us; 16427us; 1us; 16425us; 27us; 72us; 0us; 16428us; 0us; 16429us; 1us; 16431us; 35us; 83us; 4us; 32768us; 20us; 75us; 38us; 78us; 41us; 79us; 45us; 81us; 0us; 16430us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 0us; 16437us; 13us; 32768us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 1us; 32768us; 21us; 93us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 1us; 16441us; 24us; 140us; 0us; 16442us; 1us; 16442us; 34us; 16468us; 5us; 16442us; 0us; 16470us; 14us; 16470us; 15us; 16470us; 34us; 16470us; 38us; 16470us; 13us; 16444us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 19us; 16444us; 9us; 128us; 10us; 129us; 11us; 130us; 12us; 131us; 13us; 133us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 37us; 132us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 0us; 16443us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 1us; 32768us; 35us; 109us; 1us; 32768us; 41us; 110us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16449us; 1us; 32768us; 35us; 113us; 13us; 32768us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16450us; 6us; 32768us; 20us; 126us; 39us; 107us; 41us; 122us; 42us; 106us; 43us; 105us; 44us; 104us; 2us; 32768us; 35us; 118us; 41us; 125us; 1us; 32768us; 41us; 119us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 1us; 16454us; 41us; 125us; 2us; 32768us; 21us; 127us; 41us; 125us; 6us; 32768us; 20us; 126us; 39us; 107us; 41us; 122us; 42us; 106us; 43us; 105us; 44us; 104us; 6us; 32768us; 20us; 126us; 39us; 107us; 41us; 122us; 42us; 106us; 43us; 105us; 44us; 104us; 0us; 16455us; 0us; 16456us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 0us; 16460us; 0us; 16461us; 15us; 16467us; 15us; 116us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 38us; 108us; 39us; 107us; 40us; 90us; 41us; 97us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 99us; 0us; 16462us; 15us; 16467us; 15us; 116us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 38us; 108us; 39us; 107us; 40us; 90us; 41us; 97us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 99us; 0us; 16463us; 15us; 16467us; 15us; 116us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 38us; 108us; 39us; 107us; 40us; 90us; 41us; 97us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 99us; 0us; 16464us; 13us; 32768us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 2us; 32768us; 0us; 6us; 23us; 4us; 15us; 16467us; 15us; 116us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 38us; 108us; 39us; 107us; 40us; 90us; 41us; 97us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 99us; 0us; 16465us; 13us; 32768us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 2us; 32768us; 0us; 6us; 23us; 4us; 15us; 16467us; 15us; 116us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 38us; 108us; 39us; 107us; 40us; 90us; 41us; 97us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 99us; 0us; 16466us; 1us; 32768us; 35us; 149us; 13us; 32768us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 98us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16469us; 1us; 32768us; 7us; 153us; 1us; 32768us; 41us; 154us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16471us; 0us; 16472us; 2us; 16474us; 41us; 152us; 45us; 156us; 0us; 16473us; 1us; 32768us; 22us; 160us; 2us; 32768us; 0us; 6us; 23us; 4us; 0us; 16475us; 15us; 16467us; 15us; 116us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 38us; 108us; 39us; 107us; 40us; 90us; 41us; 97us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 99us; 1us; 32768us; 34us; 164us; 2us; 32768us; 0us; 6us; 23us; 4us; 13us; 32768us; 20us; 91us; 29us; 85us; 30us; 86us; 31us; 87us; 32us; 88us; 33us; 89us; 39us; 107us; 40us; 90us; 41us; 96us; 42us; 106us; 43us; 105us; 44us; 104us; 45us; 100us; 0us; 16477us; 2us; 16476us; 0us; 16479us; 14us; 159us; 0us; 16478us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 3us; 4us; 6us; 7us; 10us; 11us; 12us; 35us; 37us; 40us; 43us; 47us; 50us; 53us; 56us; 57us; 60us; 63us; 66us; 67us; 69us; 72us; 73us; 74us; 76us; 78us; 79us; 81us; 83us; 84us; 85us; 89us; 90us; 93us; 96us; 97us; 100us; 103us; 104us; 105us; 108us; 109us; 111us; 112us; 113us; 114us; 117us; 123us; 126us; 131us; 133us; 136us; 139us; 140us; 143us; 149us; 152us; 157us; 159us; 162us; 165us; 166us; 167us; 168us; 170us; 176us; 177us; 178us; 179us; 181us; 186us; 187us; 192us; 194us; 195us; 200us; 202us; 203us; 204us; 206us; 207us; 208us; 210us; 215us; 216us; 217us; 218us; 219us; 220us; 221us; 222us; 236us; 238us; 239us; 240us; 241us; 242us; 244us; 245us; 247us; 253us; 267us; 287us; 288us; 289us; 290us; 291us; 292us; 294us; 296us; 299us; 300us; 302us; 316us; 319us; 320us; 327us; 330us; 332us; 335us; 336us; 337us; 338us; 340us; 343us; 350us; 357us; 358us; 359us; 360us; 361us; 362us; 363us; 364us; 380us; 381us; 397us; 398us; 414us; 415us; 429us; 432us; 448us; 449us; 463us; 466us; 482us; 483us; 485us; 499us; 502us; 503us; 505us; 507us; 510us; 511us; 512us; 515us; 516us; 518us; 521us; 522us; 538us; 540us; 543us; 557us; 558us; 561us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 1us; 1us; 0us; 8us; 5us; 3us; 1us; 1us; 3us; 1us; 3us; 0us; 1us; 2us; 0us; 3us; 3us; 1us; 2us; 0us; 2us; 0us; 1us; 1us; 0us; 8us; 8us; 4us; 4us; 3us; 1us; 0us; 1us; 1us; 3us; 1us; 3us; 0us; 3us; 1us; 2us; 1us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 1us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 4us; 4us; 5us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 5us; 5us; 0us; 1us; 4us; 1us; 4us; 1us; 2us; 0us; 3us; 0us; 5us; 2us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 21us; 21us; 21us; 22us; 22us; 23us; 23us; 23us; 23us; 24us; 25us; 26us; 27us; 27us; 27us; 27us; 28us; 28us; 28us; 28us; 28us; 28us; 29us; 29us; 29us; 29us; 29us; 29us; 29us; 30us; 30us; 31us; 31us; 32us; 32us; 33us; 33us; 34us; 35us; 35us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 16393us; 16395us; 65535us; 65535us; 16396us; 65535us; 65535us; 16398us; 16400us; 65535us; 16401us; 65535us; 65535us; 16403us; 65535us; 65535us; 16404us; 16405us; 65535us; 16406us; 65535us; 16408us; 16410us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 16415us; 16416us; 65535us; 65535us; 16417us; 16420us; 16421us; 65535us; 65535us; 16422us; 65535us; 65535us; 16424us; 65535us; 65535us; 16426us; 16427us; 65535us; 16428us; 16429us; 65535us; 65535us; 16430us; 16432us; 16433us; 16434us; 16435us; 16436us; 16437us; 65535us; 65535us; 16438us; 16439us; 16440us; 16441us; 65535us; 16442us; 65535us; 65535us; 65535us; 65535us; 16443us; 16445us; 16446us; 16447us; 16448us; 65535us; 65535us; 65535us; 16449us; 65535us; 65535us; 65535us; 16450us; 65535us; 65535us; 65535us; 65535us; 16451us; 16452us; 16453us; 65535us; 65535us; 65535us; 65535us; 16455us; 16456us; 16457us; 16458us; 16459us; 16460us; 16461us; 65535us; 16462us; 65535us; 16463us; 65535us; 16464us; 65535us; 65535us; 65535us; 16465us; 65535us; 65535us; 65535us; 16466us; 65535us; 65535us; 65535us; 16469us; 65535us; 65535us; 65535us; 16471us; 16472us; 65535us; 16473us; 65535us; 65535us; 16475us; 65535us; 65535us; 65535us; 65535us; 16477us; 65535us; 16478us; |]
let _fsyacc_reductions ()  =    [| 
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ParserAST.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 473 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                          _1 
                   )
# 38 "Parser.fsy"
                 : ParserAST.Program));
# 484 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                             
                   )
# 41 "Parser.fsy"
                 : 'newLineSeq));
# 495 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                  
                   )
# 42 "Parser.fsy"
                 : 'newLineSeq));
# 505 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                              
                   )
# 43 "Parser.fsy"
                 : 'newLineSeq));
# 515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                     
                   )
# 46 "Parser.fsy"
                 : 'optionalNewLines));
# 526 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                          
                   )
# 47 "Parser.fsy"
                 : 'optionalNewLines));
# 536 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'optionalNewLines)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "Parser.fsy"
                                                                                                                        
                       let programDefinition = { Declarations = _7; Rules = _8; Subtyping = _6 }
                       { Namespace = _3; Imports = _5; Program = programDefinition } 
                   )
# 50 "Parser.fsy"
                 : 'program));
# 556 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                                                                   reportErrorAtPos "A program in Metacasanova must start with a namespace definition" parseState 1 
                   )
# 53 "Parser.fsy"
                 : 'program));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                           (fst _1) + "." + _3 
                   )
# 56 "Parser.fsy"
                 : 'dottedPath));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                            (fst _1) 
                   )
# 57 "Parser.fsy"
                 : 'dottedPath));
# 595 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                               reportErrorAtPos "The name of the namespace has an invalid form" parseState 1 
                   )
# 58 "Parser.fsy"
                 : 'dottedPath));
# 605 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'commaPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                            ({Namespace = ""; Name = fst _1}) :: _3 
                   )
# 61 "Parser.fsy"
                 : 'commaPath));
# 618 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                            [{Namespace = "";Name = fst _1}] 
                   )
# 62 "Parser.fsy"
                 : 'commaPath));
# 629 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'commaPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                   _2 
                   )
# 65 "Parser.fsy"
                 : 'genericSeq));
# 640 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                         [] 
                   )
# 66 "Parser.fsy"
                 : 'genericSeq));
# 650 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                               reportErrorAtPos "Generics should be enclosed by square brackets and separated by a comma" parseState 1 
                   )
# 67 "Parser.fsy"
                 : 'genericSeq));
# 660 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                              _1 :: _2 
                   )
# 70 "Parser.fsy"
                 : 'includeOrOpenStmts));
# 672 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                         [] 
                   )
# 71 "Parser.fsy"
                 : 'includeOrOpenStmts));
# 682 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                       _2 
                   )
# 74 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 695 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                    _2 
                   )
# 75 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                               reportErrorAtPos "Malformed include or open statement" parseState 1 
                   )
# 76 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 718 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                  
                       _1 :: _2 
                   )
# 79 "Parser.fsy"
                 : 'declarations));
# 731 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                         [] 
                   )
# 81 "Parser.fsy"
                 : 'declarations));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                      Some (fst _2) 
                   )
# 84 "Parser.fsy"
                 : 'priority));
# 753 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                         None 
                   )
# 85 "Parser.fsy"
                 : 'priority));
# 763 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                Left 
                   )
# 88 "Parser.fsy"
                 : 'associativity));
# 774 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                Right
                   )
# 89 "Parser.fsy"
                 : 'associativity));
# 785 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                         Left 
                   )
# 90 "Parser.fsy"
                 : 'associativity));
# 795 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'priority)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'associativity)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                                                                       
                         Func(processParsedArgs _3 _5 (fst _1) (snd _1) _2 _6 _7) 
                   )
# 93 "Parser.fsy"
                 : 'declaration));
# 813 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'priority)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'associativity)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                                                                                       
                         Data(processParsedArgs _3 _5 (fst _1) (snd _1) _2 _6 _7) 
                   )
# 95 "Parser.fsy"
                 : 'declaration));
# 831 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                                     
                         reportErrorAtPos "Function definition is missing a return type or priority/associativity is not well defined" parseState 3 
                   )
# 97 "Parser.fsy"
                 : 'declaration));
# 845 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                                     
                         reportErrorAtPos "Data definition is missing a return type or priority/associativity is not well defined" parseState 3 
                   )
# 99 "Parser.fsy"
                 : 'declaration));
# 859 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                            _1 :: _3 
                   )
# 103 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 872 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                               [_1] 
                   )
# 104 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 883 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                         [] 
                   )
# 105 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 893 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "Parser.fsy"
                                ParserUtils.Name(fst _1) 
                   )
# 108 "Parser.fsy"
                 : 'typeOrNameDeclaration));
# 904 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                         ParserUtils.Type(_1) 
                   )
# 109 "Parser.fsy"
                 : 'typeOrNameDeclaration));
# 915 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeVarsSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 112 "Parser.fsy"
                 : 'typeVarsSeq));
# 928 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                         [_1] 
                   )
# 113 "Parser.fsy"
                 : 'typeVarsSeq));
# 939 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeVarsSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                     _2 
                   )
# 116 "Parser.fsy"
                 : 'genericTypeDef));
# 950 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                         [] 
                   )
# 117 "Parser.fsy"
                 : 'genericTypeDef));
# 960 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lambdaTypeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                                                 _2 
                   )
# 120 "Parser.fsy"
                 : 'typeDeclaration));
# 971 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                              External(fst _1, Position.Create(snd _1,"")) 
                   )
# 121 "Parser.fsy"
                 : 'typeDeclaration));
# 982 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericTypeDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                           Arg(Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")),_2) 
                   )
# 122 "Parser.fsy"
                 : 'typeDeclaration));
# 994 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                               reportErrorAtPos "Invalid type name" parseState 1 
                   )
# 123 "Parser.fsy"
                 : 'typeDeclaration));
# 1004 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lambdaTypeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                                                     Arrow(_1,_3,true) 
                   )
# 126 "Parser.fsy"
                 : 'lambdaTypeDeclaration));
# 1017 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                         _1 
                   )
# 127 "Parser.fsy"
                 : 'lambdaTypeDeclaration));
# 1028 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                               Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 130 "Parser.fsy"
                 : 'customOperator));
# 1039 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                             Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 131 "Parser.fsy"
                 : 'customOperator));
# 1050 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                              Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 132 "Parser.fsy"
                 : 'customOperator));
# 1061 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 133 "Parser.fsy"
                 : 'customOperator));
# 1072 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 134 "Parser.fsy"
                 : 'customOperator));
# 1083 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                        Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 135 "Parser.fsy"
                 : 'customOperator));
# 1094 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                                  NestedExpression(_2) 
                   )
# 138 "Parser.fsy"
                 : 'arg));
# 1105 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                 _1 
                   )
# 139 "Parser.fsy"
                 : 'arg));
# 1116 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'customOperator)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                        _1 
                   )
# 140 "Parser.fsy"
                 : 'arg));
# 1127 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                            Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 141 "Parser.fsy"
                 : 'arg));
# 1138 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                               reportErrorAtPos "Invalid argument name" parseState 1 
                   )
# 142 "Parser.fsy"
                 : 'arg));
# 1148 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                    _1 :: _2 
                   )
# 145 "Parser.fsy"
                 : 'argSeq));
# 1160 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                             [_1] 
                   )
# 146 "Parser.fsy"
                 : 'argSeq));
# 1171 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                             Literal(Common.I32(fst _1),Position.Create(snd _1,"")) 
                   )
# 149 "Parser.fsy"
                 : 'literal));
# 1182 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                               Literal(Common.F64(fst _1),Position.Create(snd _1,"")) 
                   )
# 150 "Parser.fsy"
                 : 'literal));
# 1193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                Literal(Common.String(fst _1),Position.Create(snd _1,"")) 
                   )
# 151 "Parser.fsy"
                 : 'literal));
# 1204 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                              Literal(Common.Unit,Position.Create(_1,"")) 
                   )
# 152 "Parser.fsy"
                 : 'literal));
# 1215 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                         Emit(fst _1,{ Namespace = ""; Name = fst _3 },Position.Create(snd _1,"")) 
                   )
# 156 "Parser.fsy"
                 : 'emit));
# 1229 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                        FunctionCall(_1,_3) 
                   )
# 159 "Parser.fsy"
                 : 'functionCall));
# 1243 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                                       Arithmetic(_2,{ Namespace = ""; Name = fst _4 },Position.Create(_1,"")) 
                   )
# 162 "Parser.fsy"
                 : 'arithmeticCall));
# 1258 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                 ArithExpr.Value _1 
                   )
# 165 "Parser.fsy"
                 : 'arithmeticExpr));
# 1269 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                            ArithExpr.Value (Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,""))) 
                   )
# 166 "Parser.fsy"
                 : 'arithmeticExpr));
# 1280 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                          buildArithExpr (fst _2) _1 _3 (snd _2) 
                   )
# 167 "Parser.fsy"
                 : 'arithmeticExpr));
# 1293 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                          ArithExpr.Nested(_2) 
                   )
# 168 "Parser.fsy"
                 : 'arithmeticExpr));
# 1304 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                            Greater 
                   )
# 171 "Parser.fsy"
                 : 'comparisonOp));
# 1315 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                             GreaterEqual 
                   )
# 172 "Parser.fsy"
                 : 'comparisonOp));
# 1326 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                            Less 
                   )
# 173 "Parser.fsy"
                 : 'comparisonOp));
# 1337 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                             LessEqual 
                   )
# 174 "Parser.fsy"
                 : 'comparisonOp));
# 1348 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                               Equal 
                   )
# 175 "Parser.fsy"
                 : 'comparisonOp));
# 1359 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                             NotEqual 
                   )
# 176 "Parser.fsy"
                 : 'comparisonOp));
# 1370 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'emit)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                       _1 :: _2 
                   )
# 179 "Parser.fsy"
                 : 'premises));
# 1382 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'functionCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                               _1 :: _2 
                   )
# 180 "Parser.fsy"
                 : 'premises));
# 1394 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                                 _1 :: _2 
                   )
# 181 "Parser.fsy"
                 : 'premises));
# 1406 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                         (Bind({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,""),_3)) :: _5 
                   )
# 182 "Parser.fsy"
                 : 'premises));
# 1420 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'comparisonOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                                                  (Conditional(_1,_2,_3)) :: _5 
                   )
# 183 "Parser.fsy"
                 : 'premises));
# 1435 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                         [] 
                   )
# 184 "Parser.fsy"
                 : 'premises));
# 1445 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "Parser.fsy"
                               reportErrorAtPos "Malformed premise" parseState 1 
                   )
# 185 "Parser.fsy"
                 : 'premises));
# 1455 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                        ValueOutput(_1,_3) 
                   )
# 188 "Parser.fsy"
                 : 'conclusion));
# 1469 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                               reportErrorAtPos "Malformed conclusion" parseState 1  
                   )
# 189 "Parser.fsy"
                 : 'conclusion));
# 1479 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                             Arg(Id( { Namespace = ""; Name = fst _1  },Position.Create(snd _1,"")),[]),Arg(Id({ Namespace = ""; Name = fst _3 },Position.Create(snd _1,"")),[]) 
                   )
# 192 "Parser.fsy"
                 : 'subtype));
# 1493 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                               reportErrorAtPos "Malformed subtype definition" parseState 1  
                   )
# 193 "Parser.fsy"
                 : 'subtype));
# 1503 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtype)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 196 "Parser.fsy"
                                          _1 :: _2 
                   )
# 196 "Parser.fsy"
                 : 'subtypes));
# 1515 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                         [] 
                   )
# 197 "Parser.fsy"
                 : 'subtypes));
# 1525 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "Parser.fsy"
                                               true 
                   )
# 200 "Parser.fsy"
                 : 'mainOpt));
# 1537 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                         false 
                   )
# 201 "Parser.fsy"
                 : 'mainOpt));
# 1547 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'mainOpt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'conclusion)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                                       
                       Rule({ Main = _1; Premises = _2; Conclusion = _5 }) 
                   )
# 203 "Parser.fsy"
                 : 'rule));
# 1563 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 207 "Parser.fsy"
                                    _1 :: _2 
                   )
# 207 "Parser.fsy"
                 : 'rules));
# 1575 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                         [] 
                   )
# 208 "Parser.fsy"
                 : 'rules));
|]
# 1586 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 48;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParserAST.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
