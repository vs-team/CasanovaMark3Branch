// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Common
open ParserAST
open System
open ParserUtils


# 15 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | FUNC of (int * int)
  | TYPEFUNC of (int * int)
  | OPEN of (int * int)
  | INCLUDE of (int * int)
  | DATA of (int * int)
  | NAMESPACE of (int * int)
  | IS of (int * int)
  | FUN of (int * int)
  | GT of (int * int)
  | GEQ of (int * int)
  | LT of (int * int)
  | LEQ of (int * int)
  | NEQ of (int * int)
  | MAIN of (int * int)
  | ARITHMETIC of (int * int)
  | MODULE of (int * int)
  | PRIORITY of (int * int)
  | LEMIT of (int * int)
  | REMIT of (int * int)
  | COMMA
  | LBRACKET
  | RBRACKET
  | DOT
  | APOSTROPHE
  | HASH
  | COLON
  | NEWLINE
  | BIND
  | LBRACE
  | RBRACE
  | LSQUARE
  | RSQUARE
  | BAR of (int)
  | ARROW of (System.Int32 * System.Int32)
  | DARROW of (System.Int32 * System.Int32)
  | EQUAL of (System.Int32 * System.Int32)
  | EMIT of (string * (int * int))
  | UNIT of ((int * int))
  | STRING of (string * (int * int))
  | CUSTOMOPERATOR of (System.String * (int * int))
  | ID of (System.String * (int * int))
  | FLOAT of (float * (int * int))
  | INT of (int * (int * int))
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FUNC
    | TOKEN_TYPEFUNC
    | TOKEN_OPEN
    | TOKEN_INCLUDE
    | TOKEN_DATA
    | TOKEN_NAMESPACE
    | TOKEN_IS
    | TOKEN_FUN
    | TOKEN_GT
    | TOKEN_GEQ
    | TOKEN_LT
    | TOKEN_LEQ
    | TOKEN_NEQ
    | TOKEN_MAIN
    | TOKEN_ARITHMETIC
    | TOKEN_MODULE
    | TOKEN_PRIORITY
    | TOKEN_LEMIT
    | TOKEN_REMIT
    | TOKEN_COMMA
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_DOT
    | TOKEN_APOSTROPHE
    | TOKEN_HASH
    | TOKEN_COLON
    | TOKEN_NEWLINE
    | TOKEN_BIND
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LSQUARE
    | TOKEN_RSQUARE
    | TOKEN_BAR
    | TOKEN_ARROW
    | TOKEN_DARROW
    | TOKEN_EQUAL
    | TOKEN_EMIT
    | TOKEN_UNIT
    | TOKEN_STRING
    | TOKEN_CUSTOMOPERATOR
    | TOKEN_ID
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_newLineSeq
    | NONTERM_program
    | NONTERM_dottedPath
    | NONTERM_typeArg
    | NONTERM_commaPath
    | NONTERM_genericSeq
    | NONTERM_includeOrOpenStmts
    | NONTERM_includeOrOpenStmt
    | NONTERM_declarations
    | NONTERM_priority
    | NONTERM_declaration
    | NONTERM_typeOrNameDeclarations
    | NONTERM_typeOrNameDeclaration
    | NONTERM_typeVarsSeq
    | NONTERM_genericTypeDef
    | NONTERM_typeDeclaration
    | NONTERM_lambdaTypeDeclaration
    | NONTERM_arg
    | NONTERM_argSeq
    | NONTERM_literal
    | NONTERM_emit
    | NONTERM_functionCall
    | NONTERM_arithmeticCall
    | NONTERM_arithmeticExpr
    | NONTERM_comparisonOp
    | NONTERM_premises
    | NONTERM_conclusion
    | NONTERM_subtype
    | NONTERM_subtypes
    | NONTERM_mainOpt
    | NONTERM_rule
    | NONTERM_rules

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | FUNC _ -> 1 
  | TYPEFUNC _ -> 2 
  | OPEN _ -> 3 
  | INCLUDE _ -> 4 
  | DATA _ -> 5 
  | NAMESPACE _ -> 6 
  | IS _ -> 7 
  | FUN _ -> 8 
  | GT _ -> 9 
  | GEQ _ -> 10 
  | LT _ -> 11 
  | LEQ _ -> 12 
  | NEQ _ -> 13 
  | MAIN _ -> 14 
  | ARITHMETIC _ -> 15 
  | MODULE _ -> 16 
  | PRIORITY _ -> 17 
  | LEMIT _ -> 18 
  | REMIT _ -> 19 
  | COMMA  -> 20 
  | LBRACKET  -> 21 
  | RBRACKET  -> 22 
  | DOT  -> 23 
  | APOSTROPHE  -> 24 
  | HASH  -> 25 
  | COLON  -> 26 
  | NEWLINE  -> 27 
  | BIND  -> 28 
  | LBRACE  -> 29 
  | RBRACE  -> 30 
  | LSQUARE  -> 31 
  | RSQUARE  -> 32 
  | BAR _ -> 33 
  | ARROW _ -> 34 
  | DARROW _ -> 35 
  | EQUAL _ -> 36 
  | EMIT _ -> 37 
  | UNIT _ -> 38 
  | STRING _ -> 39 
  | CUSTOMOPERATOR _ -> 40 
  | ID _ -> 41 
  | FLOAT _ -> 42 
  | INT _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_FUNC 
  | 2 -> TOKEN_TYPEFUNC 
  | 3 -> TOKEN_OPEN 
  | 4 -> TOKEN_INCLUDE 
  | 5 -> TOKEN_DATA 
  | 6 -> TOKEN_NAMESPACE 
  | 7 -> TOKEN_IS 
  | 8 -> TOKEN_FUN 
  | 9 -> TOKEN_GT 
  | 10 -> TOKEN_GEQ 
  | 11 -> TOKEN_LT 
  | 12 -> TOKEN_LEQ 
  | 13 -> TOKEN_NEQ 
  | 14 -> TOKEN_MAIN 
  | 15 -> TOKEN_ARITHMETIC 
  | 16 -> TOKEN_MODULE 
  | 17 -> TOKEN_PRIORITY 
  | 18 -> TOKEN_LEMIT 
  | 19 -> TOKEN_REMIT 
  | 20 -> TOKEN_COMMA 
  | 21 -> TOKEN_LBRACKET 
  | 22 -> TOKEN_RBRACKET 
  | 23 -> TOKEN_DOT 
  | 24 -> TOKEN_APOSTROPHE 
  | 25 -> TOKEN_HASH 
  | 26 -> TOKEN_COLON 
  | 27 -> TOKEN_NEWLINE 
  | 28 -> TOKEN_BIND 
  | 29 -> TOKEN_LBRACE 
  | 30 -> TOKEN_RBRACE 
  | 31 -> TOKEN_LSQUARE 
  | 32 -> TOKEN_RSQUARE 
  | 33 -> TOKEN_BAR 
  | 34 -> TOKEN_ARROW 
  | 35 -> TOKEN_DARROW 
  | 36 -> TOKEN_EQUAL 
  | 37 -> TOKEN_EMIT 
  | 38 -> TOKEN_UNIT 
  | 39 -> TOKEN_STRING 
  | 40 -> TOKEN_CUSTOMOPERATOR 
  | 41 -> TOKEN_ID 
  | 42 -> TOKEN_FLOAT 
  | 43 -> TOKEN_INT 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_newLineSeq 
    | 3 -> NONTERM_newLineSeq 
    | 4 -> NONTERM_newLineSeq 
    | 5 -> NONTERM_program 
    | 6 -> NONTERM_dottedPath 
    | 7 -> NONTERM_dottedPath 
    | 8 -> NONTERM_typeArg 
    | 9 -> NONTERM_commaPath 
    | 10 -> NONTERM_commaPath 
    | 11 -> NONTERM_genericSeq 
    | 12 -> NONTERM_genericSeq 
    | 13 -> NONTERM_includeOrOpenStmts 
    | 14 -> NONTERM_includeOrOpenStmts 
    | 15 -> NONTERM_includeOrOpenStmt 
    | 16 -> NONTERM_includeOrOpenStmt 
    | 17 -> NONTERM_declarations 
    | 18 -> NONTERM_declarations 
    | 19 -> NONTERM_priority 
    | 20 -> NONTERM_priority 
    | 21 -> NONTERM_declaration 
    | 22 -> NONTERM_declaration 
    | 23 -> NONTERM_typeOrNameDeclarations 
    | 24 -> NONTERM_typeOrNameDeclarations 
    | 25 -> NONTERM_typeOrNameDeclarations 
    | 26 -> NONTERM_typeOrNameDeclaration 
    | 27 -> NONTERM_typeOrNameDeclaration 
    | 28 -> NONTERM_typeVarsSeq 
    | 29 -> NONTERM_typeVarsSeq 
    | 30 -> NONTERM_genericTypeDef 
    | 31 -> NONTERM_genericTypeDef 
    | 32 -> NONTERM_typeDeclaration 
    | 33 -> NONTERM_typeDeclaration 
    | 34 -> NONTERM_lambdaTypeDeclaration 
    | 35 -> NONTERM_lambdaTypeDeclaration 
    | 36 -> NONTERM_arg 
    | 37 -> NONTERM_arg 
    | 38 -> NONTERM_arg 
    | 39 -> NONTERM_arg 
    | 40 -> NONTERM_argSeq 
    | 41 -> NONTERM_argSeq 
    | 42 -> NONTERM_literal 
    | 43 -> NONTERM_literal 
    | 44 -> NONTERM_literal 
    | 45 -> NONTERM_literal 
    | 46 -> NONTERM_emit 
    | 47 -> NONTERM_functionCall 
    | 48 -> NONTERM_arithmeticCall 
    | 49 -> NONTERM_arithmeticExpr 
    | 50 -> NONTERM_arithmeticExpr 
    | 51 -> NONTERM_arithmeticExpr 
    | 52 -> NONTERM_arithmeticExpr 
    | 53 -> NONTERM_comparisonOp 
    | 54 -> NONTERM_comparisonOp 
    | 55 -> NONTERM_comparisonOp 
    | 56 -> NONTERM_comparisonOp 
    | 57 -> NONTERM_comparisonOp 
    | 58 -> NONTERM_comparisonOp 
    | 59 -> NONTERM_premises 
    | 60 -> NONTERM_premises 
    | 61 -> NONTERM_premises 
    | 62 -> NONTERM_premises 
    | 63 -> NONTERM_premises 
    | 64 -> NONTERM_premises 
    | 65 -> NONTERM_conclusion 
    | 66 -> NONTERM_subtype 
    | 67 -> NONTERM_subtypes 
    | 68 -> NONTERM_subtypes 
    | 69 -> NONTERM_mainOpt 
    | 70 -> NONTERM_mainOpt 
    | 71 -> NONTERM_rule 
    | 72 -> NONTERM_rules 
    | 73 -> NONTERM_rules 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | FUNC _ -> "FUNC" 
  | TYPEFUNC _ -> "TYPEFUNC" 
  | OPEN _ -> "OPEN" 
  | INCLUDE _ -> "INCLUDE" 
  | DATA _ -> "DATA" 
  | NAMESPACE _ -> "NAMESPACE" 
  | IS _ -> "IS" 
  | FUN _ -> "FUN" 
  | GT _ -> "GT" 
  | GEQ _ -> "GEQ" 
  | LT _ -> "LT" 
  | LEQ _ -> "LEQ" 
  | NEQ _ -> "NEQ" 
  | MAIN _ -> "MAIN" 
  | ARITHMETIC _ -> "ARITHMETIC" 
  | MODULE _ -> "MODULE" 
  | PRIORITY _ -> "PRIORITY" 
  | LEMIT _ -> "LEMIT" 
  | REMIT _ -> "REMIT" 
  | COMMA  -> "COMMA" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | DOT  -> "DOT" 
  | APOSTROPHE  -> "APOSTROPHE" 
  | HASH  -> "HASH" 
  | COLON  -> "COLON" 
  | NEWLINE  -> "NEWLINE" 
  | BIND  -> "BIND" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LSQUARE  -> "LSQUARE" 
  | RSQUARE  -> "RSQUARE" 
  | BAR _ -> "BAR" 
  | ARROW _ -> "ARROW" 
  | DARROW _ -> "DARROW" 
  | EQUAL _ -> "EQUAL" 
  | EMIT _ -> "EMIT" 
  | UNIT _ -> "UNIT" 
  | STRING _ -> "STRING" 
  | CUSTOMOPERATOR _ -> "CUSTOMOPERATOR" 
  | ID _ -> "ID" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | FUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPEFUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INCLUDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DATA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAMESPACE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | GEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NEQ _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MAIN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARITHMETIC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MODULE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PRIORITY _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LEMIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | REMIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | APOSTROPHE  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | BIND  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LSQUARE  -> (null : System.Object) 
  | RSQUARE  -> (null : System.Object) 
  | BAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EMIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UNIT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CUSTOMOPERATOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 15us; 65535us; 4us; 5us; 8us; 9us; 26us; 27us; 29us; 30us; 40us; 41us; 47us; 48us; 84us; 85us; 88us; 89us; 93us; 94us; 115us; 116us; 119us; 120us; 124us; 125us; 128us; 129us; 133us; 134us; 137us; 138us; 1us; 65535us; 0us; 2us; 4us; 65535us; 7us; 8us; 15us; 16us; 25us; 26us; 28us; 29us; 0us; 65535us; 2us; 65535us; 18us; 19us; 20us; 21us; 2us; 65535us; 35us; 36us; 42us; 43us; 2us; 65535us; 9us; 10us; 23us; 24us; 2us; 65535us; 9us; 23us; 23us; 23us; 2us; 65535us; 11us; 12us; 31us; 32us; 2us; 65535us; 39us; 40us; 46us; 47us; 2us; 65535us; 11us; 31us; 31us; 31us; 3us; 65535us; 36us; 37us; 43us; 44us; 50us; 51us; 3us; 65535us; 36us; 49us; 43us; 49us; 50us; 49us; 2us; 65535us; 55us; 56us; 57us; 58us; 1us; 65535us; 63us; 64us; 9us; 65535us; 36us; 53us; 38us; 39us; 43us; 53us; 45us; 46us; 50us; 53us; 55us; 54us; 57us; 54us; 60us; 65us; 66us; 65us; 2us; 65535us; 60us; 61us; 66us; 67us; 14us; 65535us; 68us; 75us; 75us; 75us; 76us; 75us; 87us; 75us; 108us; 76us; 110us; 76us; 112us; 76us; 114us; 115us; 116us; 76us; 118us; 119us; 120us; 76us; 123us; 75us; 135us; 76us; 138us; 75us; 12us; 65535us; 68us; 69us; 75us; 77us; 76us; 77us; 87us; 88us; 108us; 86us; 110us; 86us; 112us; 86us; 116us; 86us; 120us; 86us; 123us; 124us; 135us; 86us; 138us; 122us; 17us; 65535us; 68us; 71us; 75us; 71us; 76us; 71us; 87us; 71us; 90us; 95us; 99us; 95us; 100us; 95us; 108us; 71us; 110us; 71us; 112us; 71us; 114us; 71us; 116us; 71us; 118us; 71us; 120us; 71us; 123us; 71us; 135us; 71us; 138us; 71us; 6us; 65535us; 108us; 108us; 110us; 108us; 112us; 108us; 116us; 108us; 120us; 108us; 135us; 108us; 6us; 65535us; 108us; 110us; 110us; 110us; 112us; 110us; 116us; 110us; 120us; 110us; 135us; 110us; 6us; 65535us; 108us; 112us; 110us; 112us; 112us; 112us; 116us; 112us; 120us; 112us; 135us; 112us; 3us; 65535us; 90us; 91us; 99us; 97us; 100us; 98us; 1us; 65535us; 76us; 118us; 6us; 65535us; 108us; 109us; 110us; 111us; 112us; 113us; 116us; 117us; 120us; 121us; 135us; 136us; 1us; 65535us; 138us; 139us; 2us; 65535us; 10us; 130us; 130us; 130us; 2us; 65535us; 10us; 11us; 130us; 131us; 2us; 65535us; 12us; 135us; 140us; 135us; 2us; 65535us; 12us; 140us; 140us; 140us; 2us; 65535us; 12us; 13us; 140us; 141us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 19us; 21us; 26us; 27us; 30us; 33us; 36us; 39us; 42us; 45us; 48us; 52us; 56us; 59us; 61us; 71us; 74us; 89us; 102us; 120us; 127us; 134us; 141us; 145us; 147us; 154us; 156us; 159us; 162us; 165us; 168us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 2us; 6us; 7us; 1us; 6us; 1us; 6us; 2us; 9us; 10us; 1us; 9us; 1us; 9us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 13us; 1us; 13us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 19us; 1us; 19us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 2us; 23us; 24us; 1us; 23us; 1us; 23us; 1us; 26us; 1us; 27us; 2us; 28us; 29us; 1us; 28us; 1us; 28us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 2us; 34us; 35us; 1us; 34us; 1us; 34us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 38us; 2us; 38us; 62us; 1us; 39us; 2us; 40us; 41us; 3us; 40us; 41us; 63us; 1us; 40us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 2us; 48us; 51us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 50us; 2us; 51us; 51us; 2us; 51us; 52us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 63us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 69us; 1us; 69us; 1us; 69us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 71us; 1us; 72us; 1us; 72us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 32us; 34us; 36us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 53us; 55us; 57us; 59us; 61us; 63us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 104us; 106us; 108us; 110us; 112us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 155us; 157us; 160us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 195us; 197us; 199us; 201us; 203us; 205us; 208us; 211us; 213us; 215us; 217us; 219us; 221us; 223us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 293us; 295us; |]
let _fsyacc_action_rows = 142
let _fsyacc_actionTableElements = [|1us; 32768us; 6us; 7us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 2us; 16387us; 0us; 6us; 27us; 4us; 0us; 16386us; 0us; 16388us; 1us; 32768us; 41us; 14us; 2us; 32768us; 0us; 6us; 27us; 4us; 2us; 16398us; 3us; 28us; 4us; 25us; 1us; 16452us; 41us; 126us; 2us; 16402us; 1us; 35us; 5us; 42us; 2us; 16454us; 0us; 16457us; 14us; 132us; 0us; 16389us; 1us; 16391us; 23us; 15us; 1us; 32768us; 41us; 14us; 0us; 16390us; 1us; 16394us; 20us; 18us; 1us; 32768us; 41us; 17us; 0us; 16393us; 1us; 32768us; 41us; 17us; 1us; 32768us; 32us; 22us; 0us; 16395us; 2us; 16398us; 3us; 28us; 4us; 25us; 0us; 16397us; 1us; 32768us; 41us; 14us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16399us; 1us; 32768us; 41us; 14us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16400us; 2us; 16402us; 1us; 35us; 5us; 42us; 0us; 16401us; 1us; 32768us; 43us; 34us; 0us; 16403us; 1us; 16396us; 31us; 20us; 3us; 16409us; 21us; 60us; 39us; 52us; 41us; 63us; 1us; 32768us; 26us; 38us; 2us; 32768us; 21us; 60us; 41us; 63us; 1us; 16404us; 17us; 33us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16405us; 1us; 16396us; 31us; 20us; 3us; 16409us; 21us; 60us; 39us; 52us; 41us; 63us; 1us; 32768us; 26us; 45us; 2us; 32768us; 21us; 60us; 41us; 63us; 1us; 16404us; 17us; 33us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16406us; 1us; 16408us; 34us; 50us; 3us; 16409us; 21us; 60us; 39us; 52us; 41us; 63us; 0us; 16407us; 0us; 16410us; 0us; 16411us; 1us; 16413us; 20us; 55us; 2us; 32768us; 21us; 60us; 41us; 63us; 0us; 16412us; 2us; 32768us; 21us; 60us; 41us; 63us; 1us; 32768us; 32us; 59us; 0us; 16414us; 2us; 32768us; 21us; 60us; 41us; 63us; 1us; 32768us; 22us; 62us; 0us; 16416us; 1us; 16415us; 31us; 57us; 0us; 16417us; 1us; 16419us; 34us; 66us; 2us; 32768us; 21us; 60us; 41us; 63us; 0us; 16418us; 7us; 32768us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 1us; 32768us; 22us; 70us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 1us; 16422us; 28us; 114us; 0us; 16423us; 7us; 16425us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 13us; 16425us; 9us; 102us; 10us; 103us; 11us; 104us; 12us; 105us; 13us; 107us; 21us; 68us; 36us; 106us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 0us; 16424us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 1us; 32768us; 34us; 83us; 1us; 32768us; 41us; 84us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16430us; 1us; 32768us; 34us; 87us; 7us; 32768us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16431us; 6us; 32768us; 21us; 100us; 38us; 81us; 39us; 80us; 41us; 96us; 42us; 79us; 43us; 78us; 2us; 32768us; 34us; 92us; 41us; 99us; 1us; 32768us; 41us; 93us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16432us; 0us; 16433us; 0us; 16434us; 1us; 16435us; 41us; 99us; 2us; 32768us; 22us; 101us; 41us; 99us; 6us; 32768us; 21us; 100us; 38us; 81us; 39us; 80us; 41us; 96us; 42us; 79us; 43us; 78us; 6us; 32768us; 21us; 100us; 38us; 81us; 39us; 80us; 41us; 96us; 42us; 79us; 43us; 78us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 0us; 16442us; 9us; 16448us; 15us; 90us; 21us; 68us; 37us; 82us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 73us; 42us; 79us; 43us; 78us; 0us; 16443us; 9us; 16448us; 15us; 90us; 21us; 68us; 37us; 82us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 73us; 42us; 79us; 43us; 78us; 0us; 16444us; 9us; 16448us; 15us; 90us; 21us; 68us; 37us; 82us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 73us; 42us; 79us; 43us; 78us; 0us; 16445us; 7us; 32768us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 2us; 32768us; 0us; 6us; 27us; 4us; 9us; 16448us; 15us; 90us; 21us; 68us; 37us; 82us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 73us; 42us; 79us; 43us; 78us; 0us; 16446us; 7us; 32768us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 2us; 32768us; 0us; 6us; 27us; 4us; 9us; 16448us; 15us; 90us; 21us; 68us; 37us; 82us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 73us; 42us; 79us; 43us; 78us; 0us; 16447us; 1us; 32768us; 34us; 123us; 7us; 32768us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16449us; 1us; 32768us; 7us; 127us; 1us; 32768us; 41us; 128us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16450us; 1us; 16452us; 41us; 126us; 0us; 16451us; 1us; 32768us; 26us; 133us; 2us; 32768us; 0us; 6us; 27us; 4us; 0us; 16453us; 9us; 16448us; 15us; 90us; 21us; 68us; 37us; 82us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 73us; 42us; 79us; 43us; 78us; 1us; 32768us; 33us; 137us; 2us; 32768us; 0us; 6us; 27us; 4us; 7us; 32768us; 21us; 68us; 38us; 81us; 39us; 80us; 40us; 74us; 41us; 72us; 42us; 79us; 43us; 78us; 0us; 16455us; 2us; 16454us; 0us; 16457us; 14us; 132us; 0us; 16456us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 9us; 10us; 11us; 13us; 16us; 19us; 21us; 24us; 27us; 28us; 30us; 32us; 33us; 35us; 37us; 38us; 40us; 42us; 43us; 46us; 47us; 49us; 52us; 53us; 55us; 58us; 59us; 62us; 63us; 65us; 66us; 68us; 72us; 74us; 77us; 79us; 82us; 83us; 85us; 89us; 91us; 94us; 96us; 99us; 100us; 102us; 106us; 107us; 108us; 109us; 111us; 114us; 115us; 118us; 120us; 121us; 124us; 126us; 127us; 129us; 130us; 132us; 135us; 136us; 144us; 146us; 147us; 148us; 149us; 151us; 152us; 160us; 174us; 175us; 176us; 177us; 178us; 179us; 181us; 183us; 186us; 187us; 189us; 197us; 200us; 201us; 208us; 211us; 213us; 216us; 217us; 218us; 219us; 221us; 224us; 231us; 238us; 239us; 240us; 241us; 242us; 243us; 244us; 245us; 255us; 256us; 266us; 267us; 277us; 278us; 286us; 289us; 299us; 300us; 308us; 311us; 321us; 322us; 324us; 332us; 335us; 336us; 338us; 340us; 343us; 344us; 346us; 347us; 349us; 352us; 353us; 363us; 365us; 368us; 376us; 377us; 380us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 1us; 7us; 3us; 1us; 5us; 3us; 1us; 3us; 0us; 2us; 0us; 3us; 3us; 2us; 0us; 2us; 0us; 7us; 7us; 3us; 1us; 0us; 1us; 1us; 3us; 1us; 3us; 0us; 3us; 2us; 3us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 1us; 4us; 4us; 5us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 1us; 1us; 1us; 2us; 2us; 2us; 5us; 5us; 0us; 4us; 4us; 2us; 0us; 3us; 0us; 5us; 2us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 17us; 18us; 18us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 21us; 21us; 22us; 23us; 24us; 25us; 25us; 25us; 25us; 26us; 26us; 26us; 26us; 26us; 26us; 27us; 27us; 27us; 27us; 27us; 27us; 28us; 29us; 30us; 30us; 31us; 31us; 32us; 33us; 33us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 65535us; 65535us; 16393us; 65535us; 65535us; 16395us; 65535us; 16397us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 65535us; 16401us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 16407us; 16410us; 16411us; 65535us; 65535us; 16412us; 65535us; 65535us; 16414us; 65535us; 65535us; 16416us; 65535us; 16417us; 65535us; 65535us; 16418us; 65535us; 65535us; 16420us; 16421us; 16422us; 65535us; 16423us; 65535us; 65535us; 16424us; 16426us; 16427us; 16428us; 16429us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 16431us; 65535us; 65535us; 65535us; 65535us; 16432us; 16433us; 16434us; 65535us; 65535us; 65535us; 65535us; 16436us; 16437us; 16438us; 16439us; 16440us; 16441us; 16442us; 65535us; 16443us; 65535us; 16444us; 65535us; 16445us; 65535us; 65535us; 65535us; 16446us; 65535us; 65535us; 65535us; 16447us; 65535us; 65535us; 65535us; 16449us; 65535us; 65535us; 65535us; 16450us; 65535us; 16451us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 65535us; 16455us; 65535us; 16456us; |]
let _fsyacc_reductions ()  =    [| 
# 434 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ParserAST.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 443 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                          _1 
                   )
# 37 "Parser.fsy"
                 : ParserAST.Program));
# 454 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                             
                   )
# 40 "Parser.fsy"
                 : 'newLineSeq));
# 465 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                  
                   )
# 41 "Parser.fsy"
                 : 'newLineSeq));
# 475 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                              
                   )
# 42 "Parser.fsy"
                 : 'newLineSeq));
# 485 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                                                                              
                       let programDefinition = { Declarations = _6; Rules = _7; Subtyping = _5 }
                       _2,_4,programDefinition 
                   )
# 48 "Parser.fsy"
                 : 'program));
# 504 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                           (fst _1) + "." + _3 
                   )
# 53 "Parser.fsy"
                 : 'dottedPath));
# 516 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                            (fst _1) 
                   )
# 54 "Parser.fsy"
                 : 'dottedPath));
# 527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                                   
                        { Variable = { Namespace = ""; Name = fst _2 }; Type = _4 } 
                   )
# 57 "Parser.fsy"
                 : 'typeArg));
# 540 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'commaPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                            ({Namespace = ""; Name = fst _1}) :: _3 
                   )
# 61 "Parser.fsy"
                 : 'commaPath));
# 552 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                            [{Namespace = "";Name = fst _1}] 
                   )
# 62 "Parser.fsy"
                 : 'commaPath));
# 563 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'commaPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                   _2 
                   )
# 65 "Parser.fsy"
                 : 'genericSeq));
# 574 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                         [] 
                   )
# 66 "Parser.fsy"
                 : 'genericSeq));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                              _1 :: _2 
                   )
# 69 "Parser.fsy"
                 : 'includeOrOpenStmts));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                         [] 
                   )
# 70 "Parser.fsy"
                 : 'includeOrOpenStmts));
# 606 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                       _2 
                   )
# 73 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                    _2 
                   )
# 74 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 632 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                  
                       _1 :: _2 
                   )
# 77 "Parser.fsy"
                 : 'declarations));
# 645 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                         [] 
                   )
# 79 "Parser.fsy"
                 : 'declarations));
# 655 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                      Some (fst _2) 
                   )
# 82 "Parser.fsy"
                 : 'priority));
# 667 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                         None 
                   )
# 83 "Parser.fsy"
                 : 'priority));
# 677 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'priority)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                                                                                         
                         Func(processParsedArgs _3 _5 (fst _1) (snd _1) _2 _6) 
                   )
# 86 "Parser.fsy"
                 : 'declaration));
# 694 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericSeq)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'priority)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                                                                         
                         Data(processParsedArgs _3 _5 (fst _1) (snd _1) _2 _6) 
                   )
# 88 "Parser.fsy"
                 : 'declaration));
# 711 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                                            _1 :: _3 
                   )
# 92 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 724 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                               [_1] 
                   )
# 93 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 735 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                         [] 
                   )
# 94 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 745 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                ParserUtils.Name(fst _1) 
                   )
# 97 "Parser.fsy"
                 : 'typeOrNameDeclaration));
# 756 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                        
                         let position = rhs parseState 1
                         if isTypeNameValid _1 then
                           ParserUtils.Type(_1)
                         else
                           raise(ParseError("Type names can only contain alphanumeric characters or the special symbol kind",fst position, snd position)) 
                   )
# 98 "Parser.fsy"
                 : 'typeOrNameDeclaration));
# 772 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeVarsSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 106 "Parser.fsy"
                 : 'typeVarsSeq));
# 784 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                         [_1] 
                   )
# 107 "Parser.fsy"
                 : 'typeVarsSeq));
# 795 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeVarsSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                     _2 
                   )
# 110 "Parser.fsy"
                 : 'genericTypeDef));
# 806 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                         [] 
                   )
# 111 "Parser.fsy"
                 : 'genericTypeDef));
# 816 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lambdaTypeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                                 _2 
                   )
# 114 "Parser.fsy"
                 : 'typeDeclaration));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'genericTypeDef)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                           Arg(Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")),_2) 
                   )
# 115 "Parser.fsy"
                 : 'typeDeclaration));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lambdaTypeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                     Arrow(_1,_3,true) 
                   )
# 118 "Parser.fsy"
                 : 'lambdaTypeDeclaration));
# 852 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                         _1 
                   )
# 119 "Parser.fsy"
                 : 'lambdaTypeDeclaration));
# 863 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                  NestedExpression(_2) 
                   )
# 122 "Parser.fsy"
                 : 'arg));
# 874 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                 _1 
                   )
# 123 "Parser.fsy"
                 : 'arg));
# 885 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                            Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 124 "Parser.fsy"
                 : 'arg));
# 896 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                        Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 125 "Parser.fsy"
                 : 'arg));
# 907 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                    _1 :: _2 
                   )
# 128 "Parser.fsy"
                 : 'argSeq));
# 919 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                             [_1] 
                   )
# 129 "Parser.fsy"
                 : 'argSeq));
# 930 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                             Literal(Common.I32(fst _1),Position.Create(snd _1,"")) 
                   )
# 132 "Parser.fsy"
                 : 'literal));
# 941 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                               Literal(Common.F64(fst _1),Position.Create(snd _1,"")) 
                   )
# 133 "Parser.fsy"
                 : 'literal));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                Literal(Common.String(fst _1),Position.Create(snd _1,"")) 
                   )
# 134 "Parser.fsy"
                 : 'literal));
# 963 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                              Literal(Common.Unit,Position.Create(_1,"")) 
                   )
# 135 "Parser.fsy"
                 : 'literal));
# 974 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                         Emit(fst _1,{ Namespace = ""; Name = fst _3 },Position.Create(snd _1,"")) 
                   )
# 139 "Parser.fsy"
                 : 'emit));
# 988 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                        FunctionCall(_1,_3) 
                   )
# 142 "Parser.fsy"
                 : 'functionCall));
# 1002 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                                       Arithmetic(_2,{ Namespace = ""; Name = fst _4 },Position.Create(_1,"")) 
                   )
# 145 "Parser.fsy"
                 : 'arithmeticCall));
# 1017 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                 ArithExpr.Value _1 
                   )
# 148 "Parser.fsy"
                 : 'arithmeticExpr));
# 1028 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                            ArithExpr.Value (Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,""))) 
                   )
# 149 "Parser.fsy"
                 : 'arithmeticExpr));
# 1039 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                          buildArithExpr (fst _2) _1 _3 (snd _2) 
                   )
# 150 "Parser.fsy"
                 : 'arithmeticExpr));
# 1052 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                          ArithExpr.Nested(_2) 
                   )
# 151 "Parser.fsy"
                 : 'arithmeticExpr));
# 1063 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                            Greater 
                   )
# 154 "Parser.fsy"
                 : 'comparisonOp));
# 1074 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                             GreaterEqual 
                   )
# 155 "Parser.fsy"
                 : 'comparisonOp));
# 1085 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                            Less 
                   )
# 156 "Parser.fsy"
                 : 'comparisonOp));
# 1096 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                             LessEqual 
                   )
# 157 "Parser.fsy"
                 : 'comparisonOp));
# 1107 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                               Equal 
                   )
# 158 "Parser.fsy"
                 : 'comparisonOp));
# 1118 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                             NotEqual 
                   )
# 159 "Parser.fsy"
                 : 'comparisonOp));
# 1129 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'emit)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                       _1 :: _2 
                   )
# 162 "Parser.fsy"
                 : 'premises));
# 1141 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'functionCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                               _1 :: _2 
                   )
# 163 "Parser.fsy"
                 : 'premises));
# 1153 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arithmeticCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                 _1 :: _2 
                   )
# 164 "Parser.fsy"
                 : 'premises));
# 1165 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                         (Bind({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,""),_3)) :: _5 
                   )
# 165 "Parser.fsy"
                 : 'premises));
# 1179 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'comparisonOp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                                                  (Conditional(_1,_2,_3)) :: _5 
                   )
# 166 "Parser.fsy"
                 : 'premises));
# 1194 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                         [] 
                   )
# 167 "Parser.fsy"
                 : 'premises));
# 1204 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                        ValueOutput(_1,_3) 
                   )
# 170 "Parser.fsy"
                 : 'conclusion));
# 1218 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                    Arg(Id( { Namespace = ""; Name = fst _1  },Position.Create(snd _1,"")),[]),Arg(Id({ Namespace = ""; Name = fst _3 },Position.Create(snd _1,"")),[]) 
                   )
# 172 "Parser.fsy"
                 : 'subtype));
# 1232 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtype)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                          _1 :: _2 
                   )
# 175 "Parser.fsy"
                 : 'subtypes));
# 1244 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                         [] 
                   )
# 176 "Parser.fsy"
                 : 'subtypes));
# 1254 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                               true 
                   )
# 179 "Parser.fsy"
                 : 'mainOpt));
# 1266 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                         false 
                   )
# 180 "Parser.fsy"
                 : 'mainOpt));
# 1276 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'mainOpt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'conclusion)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "Parser.fsy"
                                                                       
                       Rule({ Main = _1; Premises = _2; Conclusion = _5 }) 
                   )
# 182 "Parser.fsy"
                 : 'rule));
# 1292 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                    _1 :: _2 
                   )
# 186 "Parser.fsy"
                 : 'rules));
# 1304 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 187 "Parser.fsy"
                         [] 
                   )
# 187 "Parser.fsy"
                 : 'rules));
|]
# 1315 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParserAST.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
