// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"


open Common
open ParserAST
open System
open ParserUtils


# 15 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | FUNC of (int * int)
  | TYPEFUNC of (int * int)
  | OPEN of (int * int)
  | INCLUDE of (int * int)
  | DATA of (int * int)
  | MODULE of (int * int)
  | IS of (int * int)
  | FUN of (int * int)
  | COMMA
  | LBRACKET
  | RBRACKET
  | DOT
  | APOSTROPHE
  | HASH
  | COLON
  | NEWLINE
  | BAR
  | BIND
  | ARROW of (System.Int32 * System.Int32)
  | DARROW of (System.Int32 * System.Int32)
  | EQUAL of (System.Int32 * System.Int32)
  | STRING of (string * (int * int))
  | ID of (System.String * (int * int))
  | FLOAT of (float * (int * int))
  | INT of (int * (int * int))
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_FUNC
    | TOKEN_TYPEFUNC
    | TOKEN_OPEN
    | TOKEN_INCLUDE
    | TOKEN_DATA
    | TOKEN_MODULE
    | TOKEN_IS
    | TOKEN_FUN
    | TOKEN_COMMA
    | TOKEN_LBRACKET
    | TOKEN_RBRACKET
    | TOKEN_DOT
    | TOKEN_APOSTROPHE
    | TOKEN_HASH
    | TOKEN_COLON
    | TOKEN_NEWLINE
    | TOKEN_BAR
    | TOKEN_BIND
    | TOKEN_ARROW
    | TOKEN_DARROW
    | TOKEN_EQUAL
    | TOKEN_STRING
    | TOKEN_ID
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_newLineSeq
    | NONTERM_program
    | NONTERM_dottedPath
    | NONTERM_includeOrOpenStmts
    | NONTERM_includeOrOpenStmt
    | NONTERM_declarations
    | NONTERM_declaration
    | NONTERM_typeOrNameDeclarations
    | NONTERM_typeOrNameDeclaration
    | NONTERM_typeDeclaration
    | NONTERM_lambdaTypeDeclaration
    | NONTERM_arg
    | NONTERM_argSeq
    | NONTERM_literal
    | NONTERM_functionCall
    | NONTERM_premises
    | NONTERM_conclusion
    | NONTERM_fractionLine
    | NONTERM_subtype
    | NONTERM_subtypes
    | NONTERM_rule
    | NONTERM_rules

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | FUNC _ -> 1 
  | TYPEFUNC _ -> 2 
  | OPEN _ -> 3 
  | INCLUDE _ -> 4 
  | DATA _ -> 5 
  | MODULE _ -> 6 
  | IS _ -> 7 
  | FUN _ -> 8 
  | COMMA  -> 9 
  | LBRACKET  -> 10 
  | RBRACKET  -> 11 
  | DOT  -> 12 
  | APOSTROPHE  -> 13 
  | HASH  -> 14 
  | COLON  -> 15 
  | NEWLINE  -> 16 
  | BAR  -> 17 
  | BIND  -> 18 
  | ARROW _ -> 19 
  | DARROW _ -> 20 
  | EQUAL _ -> 21 
  | STRING _ -> 22 
  | ID _ -> 23 
  | FLOAT _ -> 24 
  | INT _ -> 25 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_FUNC 
  | 2 -> TOKEN_TYPEFUNC 
  | 3 -> TOKEN_OPEN 
  | 4 -> TOKEN_INCLUDE 
  | 5 -> TOKEN_DATA 
  | 6 -> TOKEN_MODULE 
  | 7 -> TOKEN_IS 
  | 8 -> TOKEN_FUN 
  | 9 -> TOKEN_COMMA 
  | 10 -> TOKEN_LBRACKET 
  | 11 -> TOKEN_RBRACKET 
  | 12 -> TOKEN_DOT 
  | 13 -> TOKEN_APOSTROPHE 
  | 14 -> TOKEN_HASH 
  | 15 -> TOKEN_COLON 
  | 16 -> TOKEN_NEWLINE 
  | 17 -> TOKEN_BAR 
  | 18 -> TOKEN_BIND 
  | 19 -> TOKEN_ARROW 
  | 20 -> TOKEN_DARROW 
  | 21 -> TOKEN_EQUAL 
  | 22 -> TOKEN_STRING 
  | 23 -> TOKEN_ID 
  | 24 -> TOKEN_FLOAT 
  | 25 -> TOKEN_INT 
  | 28 -> TOKEN_end_of_input
  | 26 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_newLineSeq 
    | 3 -> NONTERM_newLineSeq 
    | 4 -> NONTERM_newLineSeq 
    | 5 -> NONTERM_program 
    | 6 -> NONTERM_dottedPath 
    | 7 -> NONTERM_dottedPath 
    | 8 -> NONTERM_includeOrOpenStmts 
    | 9 -> NONTERM_includeOrOpenStmts 
    | 10 -> NONTERM_includeOrOpenStmt 
    | 11 -> NONTERM_includeOrOpenStmt 
    | 12 -> NONTERM_declarations 
    | 13 -> NONTERM_declarations 
    | 14 -> NONTERM_declaration 
    | 15 -> NONTERM_declaration 
    | 16 -> NONTERM_typeOrNameDeclarations 
    | 17 -> NONTERM_typeOrNameDeclarations 
    | 18 -> NONTERM_typeOrNameDeclarations 
    | 19 -> NONTERM_typeOrNameDeclaration 
    | 20 -> NONTERM_typeOrNameDeclaration 
    | 21 -> NONTERM_typeDeclaration 
    | 22 -> NONTERM_typeDeclaration 
    | 23 -> NONTERM_typeDeclaration 
    | 24 -> NONTERM_lambdaTypeDeclaration 
    | 25 -> NONTERM_lambdaTypeDeclaration 
    | 26 -> NONTERM_arg 
    | 27 -> NONTERM_arg 
    | 28 -> NONTERM_arg 
    | 29 -> NONTERM_argSeq 
    | 30 -> NONTERM_argSeq 
    | 31 -> NONTERM_literal 
    | 32 -> NONTERM_literal 
    | 33 -> NONTERM_literal 
    | 34 -> NONTERM_functionCall 
    | 35 -> NONTERM_premises 
    | 36 -> NONTERM_premises 
    | 37 -> NONTERM_premises 
    | 38 -> NONTERM_conclusion 
    | 39 -> NONTERM_fractionLine 
    | 40 -> NONTERM_fractionLine 
    | 41 -> NONTERM_subtype 
    | 42 -> NONTERM_subtypes 
    | 43 -> NONTERM_subtypes 
    | 44 -> NONTERM_rule 
    | 45 -> NONTERM_rules 
    | 46 -> NONTERM_rules 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 28 
let _fsyacc_tagOfErrorTerminal = 26

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | FUNC _ -> "FUNC" 
  | TYPEFUNC _ -> "TYPEFUNC" 
  | OPEN _ -> "OPEN" 
  | INCLUDE _ -> "INCLUDE" 
  | DATA _ -> "DATA" 
  | MODULE _ -> "MODULE" 
  | IS _ -> "IS" 
  | FUN _ -> "FUN" 
  | COMMA  -> "COMMA" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACKET  -> "RBRACKET" 
  | DOT  -> "DOT" 
  | APOSTROPHE  -> "APOSTROPHE" 
  | HASH  -> "HASH" 
  | COLON  -> "COLON" 
  | NEWLINE  -> "NEWLINE" 
  | BAR  -> "BAR" 
  | BIND  -> "BIND" 
  | ARROW _ -> "ARROW" 
  | DARROW _ -> "DARROW" 
  | EQUAL _ -> "EQUAL" 
  | STRING _ -> "STRING" 
  | ID _ -> "ID" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | FUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TYPEFUNC _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | OPEN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INCLUDE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DATA _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | MODULE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FUN _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMA  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | APOSTROPHE  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | NEWLINE  -> (null : System.Object) 
  | BAR  -> (null : System.Object) 
  | BIND  -> (null : System.Object) 
  | ARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | DARROW _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EQUAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 10us; 65535us; 4us; 5us; 8us; 9us; 20us; 21us; 23us; 24us; 30us; 31us; 35us; 36us; 64us; 65us; 73us; 74us; 79us; 80us; 84us; 85us; 1us; 65535us; 0us; 2us; 4us; 65535us; 7us; 8us; 15us; 16us; 19us; 20us; 22us; 23us; 2us; 65535us; 9us; 10us; 17us; 18us; 2us; 65535us; 9us; 17us; 17us; 17us; 2us; 65535us; 11us; 12us; 25us; 26us; 2us; 65535us; 11us; 25us; 25us; 25us; 3us; 65535us; 27us; 28us; 32us; 33us; 38us; 39us; 3us; 65535us; 27us; 37us; 32us; 37us; 38us; 37us; 7us; 65535us; 27us; 41us; 29us; 30us; 32us; 41us; 34us; 35us; 38us; 41us; 42us; 48us; 49us; 48us; 2us; 65535us; 42us; 43us; 49us; 50us; 10us; 65535us; 12us; 57us; 51us; 57us; 57us; 57us; 63us; 57us; 66us; 57us; 68us; 69us; 69us; 57us; 72us; 57us; 85us; 57us; 87us; 57us; 9us; 65535us; 12us; 62us; 51us; 52us; 57us; 58us; 63us; 64us; 66us; 62us; 69us; 62us; 72us; 73us; 85us; 71us; 87us; 62us; 10us; 65535us; 12us; 54us; 51us; 54us; 57us; 54us; 63us; 54us; 66us; 54us; 68us; 54us; 69us; 54us; 72us; 54us; 85us; 54us; 87us; 54us; 4us; 65535us; 12us; 66us; 66us; 66us; 69us; 66us; 87us; 66us; 4us; 65535us; 12us; 83us; 66us; 67us; 69us; 70us; 87us; 83us; 1us; 65535us; 85us; 86us; 2us; 65535us; 75us; 76us; 83us; 84us; 2us; 65535us; 10us; 81us; 81us; 81us; 2us; 65535us; 10us; 11us; 81us; 82us; 2us; 65535us; 12us; 87us; 87us; 87us; 2us; 65535us; 12us; 13us; 87us; 88us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 14us; 16us; 21us; 24us; 27us; 30us; 33us; 37us; 41us; 49us; 52us; 63us; 73us; 84us; 89us; 94us; 96us; 99us; 102us; 105us; 108us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 2us; 6us; 7us; 1us; 6us; 1us; 6us; 1us; 8us; 1us; 8us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 2us; 16us; 17us; 1us; 16us; 1us; 16us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 23us; 2us; 24us; 25us; 1us; 24us; 1us; 24us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 2us; 28us; 36us; 2us; 29us; 30us; 1us; 29us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 2us; 39us; 40us; 1us; 39us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 11us; 13us; 15us; 17us; 19us; 21us; 23us; 25us; 27us; 29us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 102us; 104us; 106us; 108us; 110us; 112us; 114us; 116us; 119us; 122us; 124us; 126us; 128us; 130us; 132us; 134us; 136us; 138us; 140us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 181us; 183us; |]
let _fsyacc_action_rows = 89
let _fsyacc_actionTableElements = [|1us; 32768us; 6us; 7us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 2us; 16387us; 0us; 6us; 16us; 4us; 0us; 16386us; 0us; 16388us; 1us; 32768us; 23us; 14us; 2us; 32768us; 0us; 6us; 16us; 4us; 2us; 16393us; 3us; 22us; 4us; 19us; 1us; 16427us; 23us; 77us; 2us; 16397us; 1us; 27us; 5us; 32us; 6us; 16421us; 0us; 16430us; 10us; 51us; 22us; 61us; 23us; 56us; 24us; 60us; 25us; 59us; 0us; 16389us; 1us; 16391us; 12us; 15us; 1us; 32768us; 23us; 14us; 0us; 16390us; 2us; 16393us; 3us; 22us; 4us; 19us; 0us; 16392us; 1us; 32768us; 23us; 14us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16394us; 1us; 32768us; 23us; 14us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16395us; 2us; 16397us; 1us; 27us; 5us; 32us; 0us; 16396us; 4us; 16402us; 10us; 42us; 13us; 45us; 22us; 40us; 23us; 47us; 1us; 32768us; 15us; 29us; 3us; 32768us; 10us; 42us; 13us; 45us; 23us; 47us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16398us; 4us; 16402us; 10us; 42us; 13us; 45us; 22us; 40us; 23us; 47us; 1us; 32768us; 15us; 34us; 3us; 32768us; 10us; 42us; 13us; 45us; 23us; 47us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16399us; 1us; 16401us; 19us; 38us; 4us; 16402us; 10us; 42us; 13us; 45us; 22us; 40us; 23us; 47us; 0us; 16400us; 0us; 16403us; 0us; 16404us; 3us; 32768us; 10us; 42us; 13us; 45us; 23us; 47us; 1us; 32768us; 11us; 44us; 0us; 16405us; 1us; 32768us; 23us; 46us; 0us; 16406us; 0us; 16407us; 1us; 16409us; 19us; 49us; 3us; 32768us; 10us; 42us; 13us; 45us; 23us; 47us; 0us; 16408us; 5us; 32768us; 10us; 51us; 22us; 61us; 23us; 55us; 24us; 60us; 25us; 59us; 1us; 32768us; 11us; 53us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 1us; 16412us; 18us; 68us; 5us; 16414us; 10us; 51us; 22us; 61us; 23us; 55us; 24us; 60us; 25us; 59us; 0us; 16413us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 1us; 32768us; 19us; 63us; 5us; 32768us; 10us; 51us; 22us; 61us; 23us; 55us; 24us; 60us; 25us; 59us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16418us; 5us; 16421us; 10us; 51us; 22us; 61us; 23us; 56us; 24us; 60us; 25us; 59us; 0us; 16419us; 5us; 32768us; 10us; 51us; 22us; 61us; 23us; 55us; 24us; 60us; 25us; 59us; 5us; 16421us; 10us; 51us; 22us; 61us; 23us; 56us; 24us; 60us; 25us; 59us; 0us; 16420us; 1us; 32768us; 19us; 72us; 5us; 32768us; 10us; 51us; 22us; 61us; 23us; 55us; 24us; 60us; 25us; 59us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16422us; 1us; 16424us; 17us; 75us; 0us; 16423us; 1us; 32768us; 7us; 78us; 1us; 32768us; 23us; 79us; 2us; 32768us; 0us; 6us; 16us; 4us; 0us; 16425us; 1us; 16427us; 23us; 77us; 0us; 16426us; 1us; 32768us; 17us; 75us; 2us; 32768us; 0us; 6us; 16us; 4us; 5us; 32768us; 10us; 51us; 22us; 61us; 23us; 55us; 24us; 60us; 25us; 59us; 0us; 16428us; 6us; 16421us; 0us; 16430us; 10us; 51us; 22us; 61us; 23us; 56us; 24us; 60us; 25us; 59us; 0us; 16429us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 9us; 10us; 11us; 13us; 16us; 19us; 21us; 24us; 31us; 32us; 34us; 36us; 37us; 40us; 41us; 43us; 46us; 47us; 49us; 52us; 53us; 56us; 57us; 62us; 64us; 68us; 71us; 72us; 77us; 79us; 83us; 86us; 87us; 89us; 94us; 95us; 96us; 97us; 101us; 103us; 104us; 106us; 107us; 108us; 110us; 114us; 115us; 121us; 123us; 124us; 125us; 126us; 128us; 134us; 135us; 136us; 137us; 138us; 140us; 146us; 149us; 150us; 156us; 157us; 163us; 169us; 170us; 172us; 178us; 181us; 182us; 184us; 185us; 187us; 189us; 192us; 193us; 195us; 196us; 198us; 201us; 207us; 208us; 215us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 1us; 7us; 3us; 1us; 2us; 0us; 3us; 3us; 2us; 0us; 5us; 5us; 3us; 1us; 0us; 1us; 1us; 3us; 2us; 1us; 3us; 1us; 3us; 1us; 1us; 2us; 1us; 1us; 1us; 1us; 4us; 2us; 4us; 0us; 4us; 2us; 1us; 4us; 2us; 0us; 4us; 2us; 0us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 9us; 10us; 10us; 11us; 11us; 11us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 16us; 17us; 17us; 17us; 18us; 19us; 19us; 20us; 21us; 21us; 22us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 16390us; 65535us; 16392us; 65535us; 65535us; 16394us; 65535us; 65535us; 16395us; 65535us; 16396us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 16400us; 16403us; 16404us; 65535us; 65535us; 16405us; 65535us; 16406us; 16407us; 65535us; 65535us; 16408us; 65535us; 65535us; 16410us; 16411us; 16412us; 65535us; 65535us; 16413us; 16415us; 16416us; 16417us; 65535us; 65535us; 65535us; 16418us; 65535us; 16419us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 16422us; 65535us; 16423us; 65535us; 65535us; 65535us; 16425us; 65535us; 16426us; 65535us; 65535us; 65535us; 16428us; 65535us; 16429us; |]
let _fsyacc_reductions ()  =    [| 
# 289 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : ParserAST.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 298 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                          _1 
                   )
# 32 "Parser.fsy"
                 : ParserAST.Program));
# 309 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                                             
                   )
# 35 "Parser.fsy"
                 : 'newLineSeq));
# 320 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                  
                   )
# 36 "Parser.fsy"
                 : 'newLineSeq));
# 330 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                              
                   )
# 37 "Parser.fsy"
                 : 'newLineSeq));
# 340 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                                                                           
                       _2,_4,(_6,_7,_5) 
                   )
# 39 "Parser.fsy"
                 : 'program));
# 358 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                           (fst _1) + "." + _3 
                   )
# 43 "Parser.fsy"
                 : 'dottedPath));
# 370 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                            (fst _1) 
                   )
# 44 "Parser.fsy"
                 : 'dottedPath));
# 381 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmt)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'includeOrOpenStmts)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                              _1 :: _2 
                   )
# 47 "Parser.fsy"
                 : 'includeOrOpenStmts));
# 393 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                         [] 
                   )
# 48 "Parser.fsy"
                 : 'includeOrOpenStmts));
# 403 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                                       _2 
                   )
# 51 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 416 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'dottedPath)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                    _2 
                   )
# 52 "Parser.fsy"
                 : 'includeOrOpenStmt));
# 429 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'declaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'declarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                                  
                       _1 :: _2 
                   )
# 55 "Parser.fsy"
                 : 'declarations));
# 442 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                         [] 
                   )
# 57 "Parser.fsy"
                 : 'declarations));
# 452 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                                                     
                         Func(processParsedArgs _2 _4 (fst _1) (snd _1)) 
                   )
# 60 "Parser.fsy"
                 : 'declaration));
# 467 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                                                     
                         Data(processParsedArgs _2 _4 (fst _1) (snd _1)) 
                   )
# 62 "Parser.fsy"
                 : 'declaration));
# 482 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclarations)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                                            _1 :: _3 
                   )
# 66 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 495 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeOrNameDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                               [_1] 
                   )
# 67 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 506 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                         [] 
                   )
# 68 "Parser.fsy"
                 : 'typeOrNameDeclarations));
# 516 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                ParserUtils.Name(fst _1) 
                   )
# 71 "Parser.fsy"
                 : 'typeOrNameDeclaration));
# 527 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                         ParserUtils.Type(_1) 
                   )
# 72 "Parser.fsy"
                 : 'typeOrNameDeclaration));
# 538 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lambdaTypeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                                 _2 
                   )
# 76 "Parser.fsy"
                 : 'typeDeclaration));
# 549 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                       Generic({ Namespace = ""; Name = fst _2 })
                   )
# 77 "Parser.fsy"
                 : 'typeDeclaration));
# 560 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                            Arg(Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,""))) 
                   )
# 78 "Parser.fsy"
                 : 'typeDeclaration));
# 571 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lambdaTypeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                                     Arrow(_1,_3,true) 
                   )
# 81 "Parser.fsy"
                 : 'lambdaTypeDeclaration));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'typeDeclaration)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                         _1 
                   )
# 82 "Parser.fsy"
                 : 'lambdaTypeDeclaration));
# 595 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                  NestedExpression(_2) 
                   )
# 85 "Parser.fsy"
                 : 'arg));
# 606 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'literal)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                 _1 
                   )
# 86 "Parser.fsy"
                 : 'arg));
# 617 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                            Id({ Namespace = ""; Name = fst _1 },Position.Create(snd _1,"")) 
                   )
# 87 "Parser.fsy"
                 : 'arg));
# 628 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                    _1 :: _2 
                   )
# 90 "Parser.fsy"
                 : 'argSeq));
# 640 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                             [_1] 
                   )
# 91 "Parser.fsy"
                 : 'argSeq));
# 651 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                             Literal(Common.I32(fst _1),Position.Create(snd _1,"")) 
                   )
# 94 "Parser.fsy"
                 : 'literal));
# 662 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                               Literal(Common.F64(fst _1),Position.Create(snd _1,"")) 
                   )
# 95 "Parser.fsy"
                 : 'literal));
# 673 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string * (int * int))) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                Literal(Common.String(fst _1),Position.Create(snd _1,"")) 
                   )
# 96 "Parser.fsy"
                 : 'literal));
# 684 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                                        FunctionCall(_1,_3) 
                   )
# 99 "Parser.fsy"
                 : 'functionCall));
# 698 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'functionCall)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                               _1 :: _2 
                   )
# 102 "Parser.fsy"
                 : 'premises));
# 710 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'arg)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                              (Bind(fst _1,_3)) :: _4 
                   )
# 103 "Parser.fsy"
                 : 'premises));
# 723 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                         [] 
                   )
# 104 "Parser.fsy"
                 : 'premises));
# 733 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : System.Int32 * System.Int32)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'argSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                                        ValueOutput(_1,_3) 
                   )
# 107 "Parser.fsy"
                 : 'conclusion));
# 747 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fractionLine)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                           
                   )
# 110 "Parser.fsy"
                 : 'fractionLine));
# 758 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                              
                   )
# 111 "Parser.fsy"
                 : 'fractionLine));
# 768 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int * int)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : System.String * (int * int))) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                                    printfn "Subtype found"; Arg(Id( { Namespace = ""; Name = fst _1  },Position.Create(snd _1,""))),Arg(Id({ Namespace = ""; Name = fst _3 },Position.Create(snd _1,""))) 
                   )
# 113 "Parser.fsy"
                 : 'subtype));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtype)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'subtypes)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                          _1 :: _2 
                   )
# 116 "Parser.fsy"
                 : 'subtypes));
# 794 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                         [] 
                   )
# 117 "Parser.fsy"
                 : 'subtypes));
# 804 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'premises)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fractionLine)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'newLineSeq)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'conclusion)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                         Rule(_1,_4) 
                   )
# 119 "Parser.fsy"
                 : 'rule));
# 818 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'rule)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'rules)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                    _1 :: _2 
                   )
# 122 "Parser.fsy"
                 : 'rules));
# 830 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                         [] 
                   )
# 123 "Parser.fsy"
                 : 'rules));
|]
# 841 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 29;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParserAST.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
